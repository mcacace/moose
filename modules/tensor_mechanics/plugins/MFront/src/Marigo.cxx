/*!
* \file   Marigo.cxx
* \brief  this file implements the Marigo Behaviour.
*         File generated by tfel version 4.0.0-dev
* \author Thomas Helfer
* \date   1 / 12 / 2016
 */

#include<string>
#include<cstring>
#include<sstream>
#include<fstream>
#include<stdexcept>

#include"TFEL/Raise.hxx"
#include"TFEL/Material/MarigoBehaviourData.hxx"
#include"TFEL/Material/MarigoIntegrationData.hxx"
#include"TFEL/Material/Marigo.hxx"

namespace tfel::material{

MarigoParametersInitializer&
MarigoParametersInitializer::get()
{
static MarigoParametersInitializer i;
return i;
}

MarigoParametersInitializer::MarigoParametersInitializer()
{
this->Yw = 75000;
this->g = 0.2;
this->minimal_time_step_scaling_factor = 0.1;
this->maximal_time_step_scaling_factor = 1.7976931348623e+308;
// Reading parameters from a file
MarigoParametersInitializer::readParameters(*this,"Marigo-parameters.txt");
}

void
MarigoParametersInitializer::set(const char* const key,
const double v){
using namespace std;
if(::strcmp("Yw",key)==0){
this->Yw = v;
} else if(::strcmp("g",key)==0){
this->g = v;
} else if(::strcmp("minimal_time_step_scaling_factor",key)==0){
this->minimal_time_step_scaling_factor = v;
} else if(::strcmp("maximal_time_step_scaling_factor",key)==0){
this->maximal_time_step_scaling_factor = v;
} else {
tfel::raise("MarigoParametersInitializer::set: "
" no parameter named '"+std::string(key)+"'");
}
}

double
MarigoParametersInitializer::getDouble(const std::string& n,
const std::string& v)
{
double value;
std::istringstream converter(v);
converter >> value;
tfel::raise_if(!converter||(!converter.eof()),
"MarigoParametersInitializer::getDouble: "
"can't convert '"+v+"' to double for parameter '"+ n+"'");
return value;
}

void
MarigoParametersInitializer::readParameters(MarigoParametersInitializer& pi,const char* const fn){
auto tokenize = [](const std::string& line){
std::istringstream tokenizer(line);
std::vector<std::string> tokens;
std::copy(std::istream_iterator<std::string>(tokenizer),
std::istream_iterator<std::string>(),
std::back_inserter(tokens));
return tokens;
};
std::ifstream f(fn);
if(!f){
return;
}
size_t ln = 1u;
while(!f.eof()){
auto line = std::string{};
std::getline(f,line);
auto tokens = tokenize(line);
auto throw_if = [ln,line,fn](const bool c,const std::string& m){
tfel::raise_if(c,"MarigoParametersInitializer::readParameters: "
"error at line '"+std::to_string(ln)+"' "
"while reading parameter file '"+std::string(fn)+"'"
"("+m+")");
};
if(tokens.empty()){
continue;
}
if(tokens[0][0]=='#'){
continue;
}
throw_if(tokens.size()!=2u,"invalid number of tokens");
if("Yw"==tokens[0]){
pi.Yw = MarigoParametersInitializer::getDouble(tokens[0],tokens[1]);
} else if("g"==tokens[0]){
pi.g = MarigoParametersInitializer::getDouble(tokens[0],tokens[1]);
} else if("minimal_time_step_scaling_factor"==tokens[0]){
pi.minimal_time_step_scaling_factor = MarigoParametersInitializer::getDouble(tokens[0],tokens[1]);
} else if("maximal_time_step_scaling_factor"==tokens[0]){
pi.maximal_time_step_scaling_factor = MarigoParametersInitializer::getDouble(tokens[0],tokens[1]);
} else {
throw_if(true,"invalid parameter '"+tokens[0]+"'");
}
}
}

} // end of namespace tfel::material

