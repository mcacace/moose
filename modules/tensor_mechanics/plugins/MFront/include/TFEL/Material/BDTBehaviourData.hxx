/*!
* \file   TFEL/Material/BDTBehaviourData.hxx
* \brief  this file implements the BDTBehaviourData class.
*         File generated by tfel version 4.0.0-dev
 */

#ifndef LIB_TFELMATERIAL_BDT_BEHAVIOUR_DATA_HXX
#define LIB_TFELMATERIAL_BDT_BEHAVIOUR_DATA_HXX

#include<limits>
#include<string>
#include<sstream>
#include<iostream>
#include<stdexcept>
#include<algorithm>

#include"TFEL/Raise.hxx"
#include"TFEL/PhysicalConstants.hxx"
#include"TFEL/Config/TFELConfig.hxx"
#include"TFEL/Config/TFELTypes.hxx"
#include"TFEL/TypeTraits/IsFundamentalNumericType.hxx"
#include"TFEL/TypeTraits/IsReal.hxx"
#include"TFEL/Math/General/Abs.hxx"
#include"TFEL/Math/General/IEEE754.hxx"
#include"TFEL/Math/Array/ViewsArrayIO.hxx"
#include"TFEL/Math/Array/fsarrayIO.hxx"
#include"TFEL/Math/Array/runtime_arrayIO.hxx"
#include"TFEL/Math/fsarray.hxx"
#include"TFEL/Math/runtime_array.hxx"
#include"TFEL/Math/stensor.hxx"
#include"TFEL/Math/Stensor/StensorConceptIO.hxx"
#include"TFEL/Math/tmatrix.hxx"
#include"TFEL/Math/Matrix/tmatrixIO.hxx"
#include"TFEL/Math/st2tost2.hxx"
#include"TFEL/Math/ST2toST2/ST2toST2ConceptIO.hxx"
#include"TFEL/Material/ModellingHypothesis.hxx"

#include "MFront/GenericBehaviour/State.hxx"
#include "MFront/GenericBehaviour/BehaviourData.hxx"
namespace tfel::material{

//! \brief forward declaration
template<ModellingHypothesis::Hypothesis hypothesis,typename,bool>
class BDTBehaviourData;

//! \brief forward declaration
template<ModellingHypothesis::Hypothesis hypothesis, typename NumericType,bool use_qt>
class BDTIntegrationData;

//! \brief forward declaration
template<ModellingHypothesis::Hypothesis hypothesis,typename NumericType>
std::ostream&
 operator <<(std::ostream&,const BDTBehaviourData<hypothesis, NumericType,false>&);

template<ModellingHypothesis::Hypothesis hypothesis, typename NumericType>
class BDTBehaviourData<hypothesis, NumericType,false>
{

static constexpr unsigned short N = ModellingHypothesisToSpaceDimension<hypothesis>::value;
static_assert(N==1||N==2||N==3);
static_assert(tfel::typetraits::IsFundamentalNumericType<NumericType>::cond);
static_assert(tfel::typetraits::IsReal<NumericType>::cond);

friend std::ostream& operator<< <>(std::ostream&,const BDTBehaviourData&);

/* integration data is declared friend to access   driving variables at the beginning of the time step */
friend class BDTIntegrationData<hypothesis, NumericType, false>;

static constexpr unsigned short TVectorSize = N;
typedef tfel::math::StensorDimeToSize<N> StensorDimeToSize;
static constexpr unsigned short StensorSize = StensorDimeToSize::value;
typedef tfel::math::TensorDimeToSize<N> TensorDimeToSize;
static constexpr unsigned short TensorSize = TensorDimeToSize::value;

using ushort =  unsigned short;
using Types = tfel::config::Types<N, NumericType, false>;
using Type = NumericType;
using real = typename Types::real;
using time = typename Types::time;
using length = typename Types::length;
using frequency = typename Types::frequency;
using speed = typename Types::speed;
using stress = typename Types::stress;
using strain = typename Types::strain;
using strainrate = typename Types::strainrate;
using stressrate = typename Types::stressrate;
using temperature = typename Types::temperature;
using thermalexpansion = typename Types::thermalexpansion;
using thermalconductivity = typename Types::thermalconductivity;
using massdensity = typename Types::massdensity;
using energydensity = typename Types::energydensity;
using TVector = typename Types::TVector;
using DisplacementTVector = typename Types::DisplacementTVector;
using ForceTVector = typename Types::ForceTVector;
using HeatFlux = typename Types::HeatFlux;
using TemperatureGradient = typename Types::TemperatureGradient;
using Stensor = typename Types::Stensor;
using StressStensor = typename Types::StressStensor;
using StressRateStensor = typename Types::StressRateStensor;
using StrainStensor = typename Types::StrainStensor;
using StrainRateStensor = typename Types::StrainRateStensor;
using FrequencyStensor = typename Types::FrequencyStensor;
using Tensor = typename Types::Tensor;
using DeformationGradientTensor = typename Types::DeformationGradientTensor;
using StressTensor = typename Types::StressTensor;
using StiffnessTensor = typename Types::StiffnessTensor;
using Stensor4 = typename Types::Stensor4;
using TangentOperator = StiffnessTensor;
using PhysicalConstants = tfel::PhysicalConstants<NumericType, false>;

protected:

StrainStensor eto;

StressStensor sig;

#line 15 "BDT.mfront"
real young;
#line 17 "BDT.mfront"
real nu;
#line 19 "BDT.mfront"
thermalexpansion alpha;
#line 21 "BDT.mfront"
real f_c;
#line 22 "BDT.mfront"
real m_0;
#line 23 "BDT.mfront"
real alpha_p;
#line 24 "BDT.mfront"
real n_exp_T;
#line 25 "BDT.mfront"
real q_h0;
#line 26 "BDT.mfront"
real chi_h;
#line 27 "BDT.mfront"
real alpha_d;
#line 28 "BDT.mfront"
real h_d;
#line 29 "BDT.mfront"
real Qact;
#line 30 "BDT.mfront"
real A_creep;
#line 31 "BDT.mfront"
real n_creep;
#line 32 "BDT.mfront"
real El_1;
#line 33 "BDT.mfront"
real El_2;
#line 34 "BDT.mfront"
real El_3;
#line 35 "BDT.mfront"
real at_1;
#line 36 "BDT.mfront"
real at_2;
#line 37 "BDT.mfront"
real at_3;

StrainStensor eel;
#line 39 "BDT.mfront"
real pla_mult;
#line 40 "BDT.mfront"
real a;
#line 41 "BDT.mfront"
real dam;
#line 42 "BDT.mfront"
real Rv;
#line 43 "BDT.mfront"
real triax_p;
#line 44 "BDT.mfront"
real vp;
temperature T;

public:

/*!
* \brief Default constructor
*/
BDTBehaviourData()
{}

/*!
* \brief copy constructor
*/
BDTBehaviourData(const BDTBehaviourData& src)
: eto(src.eto),
sig(src.sig),
young(src.young),
nu(src.nu),
alpha(src.alpha),
f_c(src.f_c),
m_0(src.m_0),
alpha_p(src.alpha_p),
n_exp_T(src.n_exp_T),
q_h0(src.q_h0),
chi_h(src.chi_h),
alpha_d(src.alpha_d),
h_d(src.h_d),
Qact(src.Qact),
A_creep(src.A_creep),
n_creep(src.n_creep),
El_1(src.El_1),
El_2(src.El_2),
El_3(src.El_3),
at_1(src.at_1),
at_2(src.at_2),
at_3(src.at_3),
eel(src.eel),
pla_mult(src.pla_mult),
a(src.a),
dam(src.dam),
Rv(src.Rv),
triax_p(src.triax_p),
vp(src.vp),
T(src.T)
{}

/*
 * \brief constructor for the Generic interface
 * \param[in] mgb_d: behaviour data
 */
BDTBehaviourData(const mfront::gb::BehaviourData& mgb_d)
: young(mgb_d.s1.material_properties[0u]),
nu(mgb_d.s1.material_properties[1]),
alpha(mgb_d.s1.material_properties[2]),
f_c(mgb_d.s1.material_properties[3]),
m_0(mgb_d.s1.material_properties[4]),
alpha_p(mgb_d.s1.material_properties[5]),
n_exp_T(mgb_d.s1.material_properties[6]),
q_h0(mgb_d.s1.material_properties[7]),
chi_h(mgb_d.s1.material_properties[8]),
alpha_d(mgb_d.s1.material_properties[9]),
h_d(mgb_d.s1.material_properties[10]),
Qact(mgb_d.s1.material_properties[11]),
A_creep(mgb_d.s1.material_properties[12]),
n_creep(mgb_d.s1.material_properties[13]),
El_1(mgb_d.s1.material_properties[14]),
El_2(mgb_d.s1.material_properties[15]),
El_3(mgb_d.s1.material_properties[16]),
at_1(mgb_d.s1.material_properties[17]),
at_2(mgb_d.s1.material_properties[18]),
at_3(mgb_d.s1.material_properties[19]),
eel(&mgb_d.s0.internal_state_variables[0u]),
pla_mult(mgb_d.s0.internal_state_variables[StensorSize]),
a(mgb_d.s0.internal_state_variables[1 + StensorSize]),
dam(mgb_d.s0.internal_state_variables[2 + StensorSize]),
Rv(mgb_d.s0.internal_state_variables[3 + StensorSize]),
triax_p(mgb_d.s0.internal_state_variables[4 + StensorSize]),
vp(mgb_d.s0.internal_state_variables[5 + StensorSize]),
T(mgb_d.s0.external_state_variables[0u])
{
}


/*
* \brief Assignement operator
*/
BDTBehaviourData&
operator=(const BDTBehaviourData& src){
this->eto = src.eto;
this->sig = src.sig;
this->young = src.young;
this->nu = src.nu;
this->alpha = src.alpha;
this->f_c = src.f_c;
this->m_0 = src.m_0;
this->alpha_p = src.alpha_p;
this->n_exp_T = src.n_exp_T;
this->q_h0 = src.q_h0;
this->chi_h = src.chi_h;
this->alpha_d = src.alpha_d;
this->h_d = src.h_d;
this->Qact = src.Qact;
this->A_creep = src.A_creep;
this->n_creep = src.n_creep;
this->El_1 = src.El_1;
this->El_2 = src.El_2;
this->El_3 = src.El_3;
this->at_1 = src.at_1;
this->at_2 = src.at_2;
this->at_3 = src.at_3;
this->eel = src.eel;
this->pla_mult = src.pla_mult;
this->a = src.a;
this->dam = src.dam;
this->Rv = src.Rv;
this->triax_p = src.triax_p;
this->vp = src.vp;
this->T = src.T;
return *this;
}

void exportStateData(mfront::gb::State& mbg_s1) const
{
using namespace tfel::math;
tfel::math::map<StressStensor>(mbg_s1.thermodynamic_forces) = this->sig;
tfel::math::map<StrainStensor>(mbg_s1.internal_state_variables) = this->eel;
mbg_s1.internal_state_variables[StensorSize] = this->pla_mult;
mbg_s1.internal_state_variables[1 + StensorSize] = this->a;
mbg_s1.internal_state_variables[2 + StensorSize] = this->dam;
mbg_s1.internal_state_variables[3 + StensorSize] = this->Rv;
mbg_s1.internal_state_variables[4 + StensorSize] = this->triax_p;
mbg_s1.internal_state_variables[5 + StensorSize] = this->vp;
} // end of exportStateData

}; // end of BDTBehaviourDataclass

template<ModellingHypothesis::Hypothesis hypothesis, typename NumericType>
std::ostream&
operator <<(std::ostream& os,const BDTBehaviourData<hypothesis, NumericType, false>& b)
{
os << "εᵗᵒ : " << b.eto << '\n';
os << "σ : " << b.sig << '\n';
os << "young : " << b.young << '\n';
os << "nu : " << b.nu << '\n';
os << "alpha : " << b.alpha << '\n';
os << "f_c : " << b.f_c << '\n';
os << "m_0 : " << b.m_0 << '\n';
os << "alpha_p : " << b.alpha_p << '\n';
os << "n_exp_T : " << b.n_exp_T << '\n';
os << "q_h0 : " << b.q_h0 << '\n';
os << "chi_h : " << b.chi_h << '\n';
os << "alpha_d : " << b.alpha_d << '\n';
os << "h_d : " << b.h_d << '\n';
os << "Qact : " << b.Qact << '\n';
os << "A_creep : " << b.A_creep << '\n';
os << "n_creep : " << b.n_creep << '\n';
os << "El_1 : " << b.El_1 << '\n';
os << "El_2 : " << b.El_2 << '\n';
os << "El_3 : " << b.El_3 << '\n';
os << "at_1 : " << b.at_1 << '\n';
os << "at_2 : " << b.at_2 << '\n';
os << "at_3 : " << b.at_3 << '\n';
os << "εᵉˡ : " << b.eel << '\n';
os << "pla_mult : " << b.pla_mult << '\n';
os << "a : " << b.a << '\n';
os << "dam : " << b.dam << '\n';
os << "Rv : " << b.Rv << '\n';
os << "triax_p : " << b.triax_p << '\n';
os << "vp : " << b.vp << '\n';
os << "T : " << b.T << '\n';
return os;
}

} // end of namespace tfel::material

#endif /* LIB_TFELMATERIAL_BDT_BEHAVIOUR_DATA_HXX */
