/*!
* \file   TFEL/Material/LinearElasticity.hxx
* \brief  this file implements the LinearElasticity Behaviour.
*         File generated by tfel version 4.0.0-dev
* \author Helfer Thomas
* \date   23 / 11 / 06
 */

#ifndef LIB_TFELMATERIAL_LINEARELASTICITY_HXX
#define LIB_TFELMATERIAL_LINEARELASTICITY_HXX

#include<string>
#include<iostream>
#include<limits>
#include<stdexcept>
#include<algorithm>

#include"TFEL/Raise.hxx"
#include"TFEL/PhysicalConstants.hxx"
#include"TFEL/Config/TFELConfig.hxx"
#include"TFEL/Config/TFELTypes.hxx"
#include"TFEL/TypeTraits/IsFundamentalNumericType.hxx"
#include"TFEL/TypeTraits/IsReal.hxx"
#include"TFEL/Math/General/IEEE754.hxx"
#include"TFEL/Material/MaterialException.hxx"
#include"TFEL/Material/MechanicalBehaviour.hxx"
#include"TFEL/Material/MechanicalBehaviourTraits.hxx"
#include"TFEL/Material/OutOfBoundsPolicy.hxx"
#include"TFEL/Material/BoundsCheck.hxx"
#include"TFEL/Material/IsotropicPlasticity.hxx"
#include"TFEL/Material/Lame.hxx"
#include"TFEL/Material/Hosford1972YieldCriterion.hxx"
#include"TFEL/Material/LinearElasticityBehaviourData.hxx"
#include"TFEL/Material/LinearElasticityIntegrationData.hxx"

#line 21 "LinearElasticity.mfront"
#include "TFEL/Material/Lame.hxx"

#include "MFront/GenericBehaviour/State.hxx"
#include "MFront/GenericBehaviour/BehaviourData.hxx"
namespace tfel::material{

struct LinearElasticityParametersInitializer
{
static LinearElasticityParametersInitializer&
get();

double minimal_time_step_scaling_factor;
double maximal_time_step_scaling_factor;

void set(const char* const,const double);

/*!
 * \brief convert a string to double
 * \param[in] p : parameter
 * \param[in] v : value
 */
static double getDouble(const std::string&,const std::string&);
private :

LinearElasticityParametersInitializer();

LinearElasticityParametersInitializer(const LinearElasticityParametersInitializer&);

LinearElasticityParametersInitializer&
operator=(const LinearElasticityParametersInitializer&);
/*!
 * \brief read the parameters from the given file
 * \param[out] pi : parameters initializer
 * \param[in]  fn : file name
 */
static void readParameters(LinearElasticityParametersInitializer&,const char* const);
};

//! \brief forward declaration
template<ModellingHypothesis::Hypothesis, typename NumericType, bool use_qt>
class LinearElasticity;

//! \brief forward declaration
template<ModellingHypothesis::Hypothesis hypothesis, typename NumericType, bool use_qt>
std::ostream&
 operator <<(std::ostream&,const LinearElasticity<hypothesis, NumericType, use_qt>&);

/*!
* \class LinearElasticity
* \brief This class implements the LinearElasticity behaviour.
* \tparam hypothesis: modelling hypothesis.
* \tparam NumericType: numerical type.
* \tparam use_qt: conditional saying if quantities are use.
* \author Helfer Thomas
* \date   23 / 11 / 06
* Linear elastic ( small strain ) model 
*/
template<ModellingHypothesis::Hypothesis hypothesis, typename NumericType, bool use_qt>
struct LinearElasticity final
: public MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, use_qt>,
public LinearElasticityBehaviourData<hypothesis, NumericType, use_qt>,
public LinearElasticityIntegrationData<hypothesis, NumericType, use_qt>
{

static constexpr unsigned short N = ModellingHypothesisToSpaceDimension<hypothesis>::value;

static_assert(N==1||N==2||N==3);
static_assert(tfel::typetraits::IsFundamentalNumericType<NumericType>::cond);
static_assert(tfel::typetraits::IsReal<NumericType>::cond);

friend std::ostream& operator<< <>(std::ostream&,const LinearElasticity&);

static constexpr unsigned short TVectorSize = N;
typedef tfel::math::StensorDimeToSize<N> StensorDimeToSize;
static constexpr unsigned short StensorSize = StensorDimeToSize::value;
typedef tfel::math::TensorDimeToSize<N> TensorDimeToSize;
static constexpr unsigned short TensorSize = TensorDimeToSize::value;

using ushort =  unsigned short;
using Types = tfel::config::Types<N, NumericType, use_qt>;
using Type = NumericType;
using real = typename Types::real;
using time = typename Types::time;
using length = typename Types::length;
using frequency = typename Types::frequency;
using speed = typename Types::speed;
using stress = typename Types::stress;
using strain = typename Types::strain;
using strainrate = typename Types::strainrate;
using stressrate = typename Types::stressrate;
using temperature = typename Types::temperature;
using thermalexpansion = typename Types::thermalexpansion;
using thermalconductivity = typename Types::thermalconductivity;
using massdensity = typename Types::massdensity;
using energydensity = typename Types::energydensity;
using TVector = typename Types::TVector;
using DisplacementTVector = typename Types::DisplacementTVector;
using ForceTVector = typename Types::ForceTVector;
using HeatFlux = typename Types::HeatFlux;
using TemperatureGradient = typename Types::TemperatureGradient;
using Stensor = typename Types::Stensor;
using StressStensor = typename Types::StressStensor;
using StressRateStensor = typename Types::StressRateStensor;
using StrainStensor = typename Types::StrainStensor;
using StrainRateStensor = typename Types::StrainRateStensor;
using FrequencyStensor = typename Types::FrequencyStensor;
using Tensor = typename Types::Tensor;
using DeformationGradientTensor = typename Types::DeformationGradientTensor;
using StressTensor = typename Types::StressTensor;
using StiffnessTensor = typename Types::StiffnessTensor;
using Stensor4 = typename Types::Stensor4;
using TangentOperator = StiffnessTensor;
using PhysicalConstants = tfel::PhysicalConstants<NumericType, use_qt>;

public :

typedef LinearElasticityBehaviourData<hypothesis, NumericType, use_qt> BehaviourData;
typedef LinearElasticityIntegrationData<hypothesis, NumericType, use_qt> IntegrationData;
typedef typename MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, use_qt>::SMFlag SMFlag;
typedef typename MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, use_qt>::SMType SMType;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, use_qt>::ELASTIC;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, use_qt>::SECANTOPERATOR;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, use_qt>::TANGENTOPERATOR;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, use_qt>::CONSISTENTTANGENTOPERATOR;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, use_qt>::NOSTIFFNESSREQUESTED;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, use_qt>::STANDARDTANGENTOPERATOR;
using IntegrationResult = typename MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, use_qt>::IntegrationResult;

using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, use_qt>::SUCCESS;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, use_qt>::FAILURE;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, use_qt>::UNRELIABLE_RESULTS;

using StressFreeExpansionType = StrainStensor;

private :




#line 16 "LinearElasticity.mfront"
stress lambda;
#line 17 "LinearElasticity.mfront"
stress mu;

time minimal_time_step_scaling_factor;
time maximal_time_step_scaling_factor;

//! Tangent operator;
TangentOperator Dt;
//! alias to the tangent operator;
TangentOperator& dsig_ddeto;
/*!
* \brief Update internal variables at end of integration
*/
void updateIntegrationVariables()
{}

/*!
* \brief Update internal variables at end of integration
*/
void updateStateVariables()
{}

/*!
* \brief Update auxiliary state variables at end of integration
*/
void updateAuxiliaryStateVariables()
{}

//! \brief Default constructor (disabled)
LinearElasticity() =delete ;
//! \brief Copy constructor (disabled)
LinearElasticity(const LinearElasticity&) = delete;
//! \brief Assignement operator (disabled)
LinearElasticity& operator = (const LinearElasticity&) = delete;

public:

/*!
* \brief Constructor
*/
LinearElasticity(const LinearElasticityBehaviourData<hypothesis, NumericType, use_qt>& src1,
const LinearElasticityIntegrationData<hypothesis, NumericType, use_qt>& src2)
: LinearElasticityBehaviourData<hypothesis, NumericType, use_qt>(src1),
LinearElasticityIntegrationData<hypothesis, NumericType, use_qt>(src2),
dsig_ddeto(Dt)
{
using namespace std;
using namespace tfel::math;
using std::vector;
this->minimal_time_step_scaling_factor = time(LinearElasticityParametersInitializer::get().minimal_time_step_scaling_factor);
this->maximal_time_step_scaling_factor = time(LinearElasticityParametersInitializer::get().maximal_time_step_scaling_factor);
}

/*
 * \brief constructor for the Generic interface
 * \param[in] mgb_d: behaviour data
 */
LinearElasticity(const mfront::gb::BehaviourData& mgb_d)
: LinearElasticityBehaviourData<hypothesis, NumericType, use_qt>(mgb_d),
LinearElasticityIntegrationData<hypothesis, NumericType, use_qt>(mgb_d),
dsig_ddeto(Dt)
{
using namespace std;
using namespace tfel::math;
using std::vector;
this->minimal_time_step_scaling_factor = time(LinearElasticityParametersInitializer::get().minimal_time_step_scaling_factor);
this->maximal_time_step_scaling_factor = time(LinearElasticityParametersInitializer::get().maximal_time_step_scaling_factor);
this-> eto = tfel::math::map<StrainStensor>(mgb_d.s0.gradients);
tfel::fsalgo::transform<StensorSize>::exe(mgb_d.s1.gradients,mgb_d.s0.gradients,this->deto.begin(),std::minus<real>());
this-> sig = tfel::math::map<StressStensor>(mgb_d.s0.thermodynamic_forces);
}

/*!
 * \ brief initialize the behaviour with user code
 */
void initialize(){
using namespace std;
using namespace tfel::math;
using std::vector;
}

/*!
* \brief set the policy for "out of bounds" conditions
*/
void
setOutOfBoundsPolicy(const OutOfBoundsPolicy policy_value){
this->policy = policy_value;
} // end of setOutOfBoundsPolicy

/*!
* \return the modelling hypothesis
*/
constexpr ModellingHypothesis::Hypothesis
getModellingHypothesis() const{
return hypothesis;
} // end of getModellingHypothesis

/*!
* \brief check bounds
*/
void checkBounds() const{
} // end of checkBounds

IntegrationResult computePredictionOperator(const SMFlag,const SMType) override{
tfel::raise("LinearElasticity::computePredictionOperator: "
"unsupported prediction operator flag");
}

time getMinimalTimeStepScalingFactor() const noexcept override{
  return this->minimal_time_step_scaling_factor;
}

std::pair<bool, time>
computeAPrioriTimeStepScalingFactor(const time current_time_step_scaling_factor) const override{
const auto time_scaling_factor = this->computeAPrioriTimeStepScalingFactorII();
return {time_scaling_factor.first,
        std::min(std::min(std::max(time_scaling_factor.second,
                                   this->minimal_time_step_scaling_factor),
                          this->maximal_time_step_scaling_factor),
                  current_time_step_scaling_factor)};
}

/*!
* \brief Integrate behaviour  over the time step
*/
IntegrationResult
integrate(const SMFlag smflag, const SMType smt) override{
using namespace std;
using namespace tfel::math;
raise_if(smflag!=MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, use_qt>::STANDARDTANGENTOPERATOR,
"invalid tangent operator flag");
bool computeTangentOperator_ = smt!=NOSTIFFNESSREQUESTED;
#line 26 "LinearElasticity.mfront"
using namespace tfel::material::lame;
#line 27 "LinearElasticity.mfront"
this->lambda = computeLambda(this->young, this->nu);
#line 28 "LinearElasticity.mfront"
this->mu = computeMu(this->young, this->nu);
#line 29 "LinearElasticity.mfront"
this->sig = this->lambda * trace(this->eto + this->deto) * StrainStensor::Id() +
#line 30 "LinearElasticity.mfront"
2 * this->mu * (this->eto + this->deto);
#line 31 "LinearElasticity.mfront"
if (computeTangentOperator_)
#line 32 "LinearElasticity.mfront"
{
#line 33 "LinearElasticity.mfront"
this->Dt = this->lambda * Stensor4::IxI() + 2 * this->mu * Stensor4::Id();
#line 34 "LinearElasticity.mfront"
}
this->updateIntegrationVariables();
this->updateStateVariables();
this->updateAuxiliaryStateVariables();
return MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, use_qt>::SUCCESS;
}

std::pair<bool, time>
computeAPosterioriTimeStepScalingFactor(const time current_time_step_scaling_factor) const override{
const auto time_scaling_factor = this->computeAPosterioriTimeStepScalingFactorII();
return {time_scaling_factor.first,
        std::min(std::min(std::max(time_scaling_factor.second,
                                   this->minimal_time_step_scaling_factor),
                          this->maximal_time_step_scaling_factor),
                 current_time_step_scaling_factor)};
}

/*!
* \brief Update the internal energy at end of the time step
* \param[in] Psi_s: internal energy at end of the time step
*/
void computeInternalEnergy(real& Psi_s) const
{
Psi_s=0;
}

/*!
* \brief Update the dissipated energy at end of the time step
* \param[in] Psi_d: dissipated energy at end of the time step
*/
void computeDissipatedEnergy(real& Psi_d) const
{
Psi_d=0;
}

/*!
* \brief compute the sound velocity
* \param[in] rho_m0: mass density in the reference configuration
*/
speed computeSpeedOfSound(const massdensity&) const {
return speed(0);

}

const TangentOperator& getTangentOperator() const{
return this->Dt;
}

void updateExternalStateVariables(){
this->eto  += this->deto;
this->T += this->dT;
}

//!
~LinearElasticity()
 override = default;

private:

std::pair<bool, time> computeAPrioriTimeStepScalingFactorII() const{
return {true, this->maximal_time_step_scaling_factor};
}

std::pair<bool, time> computeAPosterioriTimeStepScalingFactorII() const{
return {true,this->maximal_time_step_scaling_factor};
}

//! policy for treating out of bounds conditions
OutOfBoundsPolicy policy = None;
}; // end of LinearElasticity class

template<ModellingHypothesis::Hypothesis hypothesis, typename NumericType, bool use_qt>
std::ostream&
operator <<(std::ostream& os,const LinearElasticity<hypothesis, NumericType, use_qt>& b)
{
os << "εᵗᵒ : " << b.eto << '\n';
os << "Δεᵗᵒ : " << b.deto << '\n';
os << "σ : " << b.sig << '\n';
os << "Δt : " << b.dt << '\n';
os << "young : " << b.young << '\n';
os << "nu : " << b.nu << '\n';
os << "T : " << b.T << '\n';
os << "ΔT : " << b.dT << '\n';
os << "minimal_time_step_scaling_factor : " << b.minimal_time_step_scaling_factor << '\n';
os << "maximal_time_step_scaling_factor : " << b.maximal_time_step_scaling_factor << '\n';
return os;
}

/*!
* Partial specialisation for LinearElasticity.
*/
template<ModellingHypothesis::Hypothesis hypothesis, typename NumericType,bool use_qt>
class MechanicalBehaviourTraits<LinearElasticity<hypothesis, NumericType, use_qt> >
{
static constexpr unsigned short N = ModellingHypothesisToSpaceDimension<hypothesis>::value;
static constexpr unsigned short TVectorSize = N;
typedef tfel::math::StensorDimeToSize<N> StensorDimeToSize;
static constexpr unsigned short StensorSize = StensorDimeToSize::value;
typedef tfel::math::TensorDimeToSize<N> TensorDimeToSize;
static constexpr unsigned short TensorSize = TensorDimeToSize::value;
public:
static constexpr bool is_defined = true;
static constexpr bool use_quantities = use_qt;
static constexpr bool hasStressFreeExpansion = false;
static constexpr bool handlesThermalExpansion = false;
static constexpr unsigned short dimension = N;
static constexpr unsigned short material_properties_nb = 2;
static constexpr unsigned short internal_variables_nb  = 0u;
static constexpr unsigned short external_variables_nb  = 1;
static constexpr unsigned short external_variables_nb2 = 0u;
static constexpr bool hasConsistentTangentOperator = true;
static constexpr bool isConsistentTangentOperatorSymmetric = true;
static constexpr bool hasPredictionOperator = false;
static constexpr bool hasAPrioriTimeStepScalingFactor = false;
static constexpr bool hasComputeInternalEnergy = false;
static constexpr bool hasComputeDissipatedEnergy = false;
/*!
* \return the name of the class.
*/
static const char* getName(){
return "LinearElasticity";
}

};

/*!
* Partial specialisation for LinearElasticity.
*/
template<typename NumericType,bool use_qt>
class MechanicalBehaviourTraits<LinearElasticity<ModellingHypothesis::AXISYMMETRICALGENERALISEDPLANESTRESS, NumericType, use_qt> >
{
public:
static constexpr bool is_defined = false;
static constexpr bool use_quantities = use_qt;
static constexpr bool hasStressFreeExpansion = false;
static constexpr bool handlesThermalExpansion = false;
static constexpr unsigned short dimension = 0u;
static constexpr unsigned short material_properties_nb = 0u;
static constexpr unsigned short internal_variables_nb  = 0u;
static constexpr unsigned short external_variables_nb  = 0u;
static constexpr unsigned short external_variables_nb2 = 0u;
static constexpr bool hasConsistentTangentOperator = false;
static constexpr bool isConsistentTangentOperatorSymmetric = false;
static constexpr bool hasPredictionOperator = false;
static constexpr bool hasAPrioriTimeStepScalingFactor = false;
static constexpr bool hasComputeInternalEnergy = false;
static constexpr bool hasComputeDissipatedEnergy = false;
/*!
* \return the name of the class.
*/
static const char* getName(){
return "LinearElasticity";
}

};

/*!
* Partial specialisation for LinearElasticity.
*/
template<typename NumericType,bool use_qt>
class MechanicalBehaviourTraits<LinearElasticity<ModellingHypothesis::PLANESTRESS, NumericType, use_qt> >
{
public:
static constexpr bool is_defined = false;
static constexpr bool use_quantities = use_qt;
static constexpr bool hasStressFreeExpansion = false;
static constexpr bool handlesThermalExpansion = false;
static constexpr unsigned short dimension = 0u;
static constexpr unsigned short material_properties_nb = 0u;
static constexpr unsigned short internal_variables_nb  = 0u;
static constexpr unsigned short external_variables_nb  = 0u;
static constexpr unsigned short external_variables_nb2 = 0u;
static constexpr bool hasConsistentTangentOperator = false;
static constexpr bool isConsistentTangentOperatorSymmetric = false;
static constexpr bool hasPredictionOperator = false;
static constexpr bool hasAPrioriTimeStepScalingFactor = false;
static constexpr bool hasComputeInternalEnergy = false;
static constexpr bool hasComputeDissipatedEnergy = false;
/*!
* \return the name of the class.
*/
static const char* getName(){
return "LinearElasticity";
}

};

} // end of namespace tfel::material

#endif /* LIB_TFELMATERIAL_LINEARELASTICITY_HXX */
