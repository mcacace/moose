/*!
* \file   TFEL/Material/Marigo.hxx
* \brief  this file implements the Marigo Behaviour.
*         File generated by tfel version 4.0.0-dev
* \author Thomas Helfer
* \date   1 / 12 / 2016
 */

#ifndef LIB_TFELMATERIAL_MARIGO_HXX
#define LIB_TFELMATERIAL_MARIGO_HXX

#include<string>
#include<iostream>
#include<limits>
#include<stdexcept>
#include<algorithm>

#include"TFEL/Raise.hxx"
#include"TFEL/PhysicalConstants.hxx"
#include"TFEL/Config/TFELConfig.hxx"
#include"TFEL/Config/TFELTypes.hxx"
#include"TFEL/TypeTraits/IsFundamentalNumericType.hxx"
#include"TFEL/TypeTraits/IsReal.hxx"
#include"TFEL/Math/General/IEEE754.hxx"
#include"TFEL/Material/MaterialException.hxx"
#include"TFEL/Material/MechanicalBehaviour.hxx"
#include"TFEL/Material/MechanicalBehaviourTraits.hxx"
#include"TFEL/Material/OutOfBoundsPolicy.hxx"
#include"TFEL/Material/BoundsCheck.hxx"
#include"TFEL/Material/IsotropicPlasticity.hxx"
#include"TFEL/Material/Lame.hxx"
#include"TFEL/Material/Hosford1972YieldCriterion.hxx"
#include"TFEL/Material/MarigoBehaviourData.hxx"
#include"TFEL/Material/MarigoIntegrationData.hxx"

#include "MFront/GenericBehaviour/State.hxx"
#include "MFront/GenericBehaviour/BehaviourData.hxx"
namespace tfel::material{

struct MarigoParametersInitializer
{
static MarigoParametersInitializer&
get();

double Yw;
double g;
double minimal_time_step_scaling_factor;
double maximal_time_step_scaling_factor;

void set(const char* const,const double);

/*!
 * \brief convert a string to double
 * \param[in] p : parameter
 * \param[in] v : value
 */
static double getDouble(const std::string&,const std::string&);
private :

MarigoParametersInitializer();

MarigoParametersInitializer(const MarigoParametersInitializer&);

MarigoParametersInitializer&
operator=(const MarigoParametersInitializer&);
/*!
 * \brief read the parameters from the given file
 * \param[out] pi : parameters initializer
 * \param[in]  fn : file name
 */
static void readParameters(MarigoParametersInitializer&,const char* const);
};

//! \brief forward declaration
template<ModellingHypothesis::Hypothesis, typename NumericType, bool use_qt>
class Marigo;

//! \brief forward declaration
template<ModellingHypothesis::Hypothesis hypothesis, typename NumericType>
std::ostream&
 operator <<(std::ostream&,const Marigo<hypothesis, NumericType, false>&);

/*!
* \class Marigo
* \brief This class implements the Marigo behaviour.
* \tparam hypothesis: modelling hypothesis.
* \tparam NumericType: numerical type.
* \author Thomas Helfer
* \date   1 / 12 / 2016
* Formulation d'une loi d'endommagement d'un matÃ©riau Ã©lastique. 
* Compte-rendu de l'AcadÃ©mie des Sciences, 
* Paris 1981; sÃ©rie II, 292(19): 1309-1313 
* 
* Loi d'endommagement d'un matÃ©riau Ã©lastique fragile. 
* RÃ©fÃ©rence R5.03.18 du Code_Aster (rÃ©vision 10413). 2016 
*/
template<ModellingHypothesis::Hypothesis hypothesis,typename NumericType>
struct Marigo<hypothesis, NumericType, false> final
: public MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>,
public MarigoBehaviourData<hypothesis, NumericType, false>,
public MarigoIntegrationData<hypothesis, NumericType, false>
{

static constexpr unsigned short N = ModellingHypothesisToSpaceDimension<hypothesis>::value;

static_assert(N==1||N==2||N==3);
static_assert(tfel::typetraits::IsFundamentalNumericType<NumericType>::cond);
static_assert(tfel::typetraits::IsReal<NumericType>::cond);

friend std::ostream& operator<< <>(std::ostream&,const Marigo&);

static constexpr unsigned short TVectorSize = N;
typedef tfel::math::StensorDimeToSize<N> StensorDimeToSize;
static constexpr unsigned short StensorSize = StensorDimeToSize::value;
typedef tfel::math::TensorDimeToSize<N> TensorDimeToSize;
static constexpr unsigned short TensorSize = TensorDimeToSize::value;

using ushort =  unsigned short;
using Types = tfel::config::Types<N, NumericType, false>;
using Type = NumericType;
using real = typename Types::real;
using time = typename Types::time;
using length = typename Types::length;
using frequency = typename Types::frequency;
using speed = typename Types::speed;
using stress = typename Types::stress;
using strain = typename Types::strain;
using strainrate = typename Types::strainrate;
using stressrate = typename Types::stressrate;
using temperature = typename Types::temperature;
using thermalexpansion = typename Types::thermalexpansion;
using thermalconductivity = typename Types::thermalconductivity;
using massdensity = typename Types::massdensity;
using energydensity = typename Types::energydensity;
using TVector = typename Types::TVector;
using DisplacementTVector = typename Types::DisplacementTVector;
using ForceTVector = typename Types::ForceTVector;
using HeatFlux = typename Types::HeatFlux;
using TemperatureGradient = typename Types::TemperatureGradient;
using Stensor = typename Types::Stensor;
using StressStensor = typename Types::StressStensor;
using StressRateStensor = typename Types::StressRateStensor;
using StrainStensor = typename Types::StrainStensor;
using StrainRateStensor = typename Types::StrainRateStensor;
using FrequencyStensor = typename Types::FrequencyStensor;
using Tensor = typename Types::Tensor;
using DeformationGradientTensor = typename Types::DeformationGradientTensor;
using StressTensor = typename Types::StressTensor;
using StiffnessTensor = typename Types::StiffnessTensor;
using Stensor4 = typename Types::Stensor4;
using TangentOperator = StiffnessTensor;
using PhysicalConstants = tfel::PhysicalConstants<NumericType, false>;

public :

typedef MarigoBehaviourData<hypothesis, NumericType, false> BehaviourData;
typedef MarigoIntegrationData<hypothesis, NumericType, false> IntegrationData;
typedef typename MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::SMFlag SMFlag;
typedef typename MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::SMType SMType;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::ELASTIC;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::SECANTOPERATOR;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::TANGENTOPERATOR;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::CONSISTENTTANGENTOPERATOR;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::NOSTIFFNESSREQUESTED;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::STANDARDTANGENTOPERATOR;
using IntegrationResult = typename MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::IntegrationResult;

using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::SUCCESS;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::FAILURE;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::UNRELIABLE_RESULTS;

using StressFreeExpansionType = StrainStensor;

private :



#line 24 "Marigo.mfront"
real dd;

#line 21 "Marigo.mfront"
stress lambda;
#line 22 "Marigo.mfront"
stress mu;

#line 18 "Marigo.mfront"
real Yw;
#line 19 "Marigo.mfront"
real g;
time minimal_time_step_scaling_factor;
time maximal_time_step_scaling_factor;

//! Tangent operator;
TangentOperator Dt;
//! alias to the tangent operator;
TangentOperator& dsig_ddeto;
/*!
* \brief Update internal variables at end of integration
*/
void updateIntegrationVariables(){
}

/*!
* \brief Update internal variables at end of integration
*/
void updateStateVariables(){
this->d += this->dd;
}

/*!
* \brief Update auxiliary state variables at end of integration
*/
void updateAuxiliaryStateVariables()
{}

//! \brief Default constructor (disabled)
Marigo() =delete ;
//! \brief Copy constructor (disabled)
Marigo(const Marigo&) = delete;
//! \brief Assignement operator (disabled)
Marigo& operator = (const Marigo&) = delete;

public:

/*!
* \brief Constructor
*/
Marigo(const MarigoBehaviourData<hypothesis, NumericType, false>& src1,
const MarigoIntegrationData<hypothesis, NumericType, false>& src2)
: MarigoBehaviourData<hypothesis, NumericType, false>(src1),
MarigoIntegrationData<hypothesis, NumericType, false>(src2),
dd(real(0)),
dsig_ddeto(Dt)
{
using namespace std;
using namespace tfel::math;
using std::vector;
this->Yw = MarigoParametersInitializer::get().Yw;
this->g = MarigoParametersInitializer::get().g;
this->minimal_time_step_scaling_factor = MarigoParametersInitializer::get().minimal_time_step_scaling_factor;
this->maximal_time_step_scaling_factor = MarigoParametersInitializer::get().maximal_time_step_scaling_factor;
}

/*
 * \brief constructor for the Generic interface
 * \param[in] mgb_d: behaviour data
 */
Marigo(const mfront::gb::BehaviourData& mgb_d)
: MarigoBehaviourData<hypothesis, NumericType, false>(mgb_d),
MarigoIntegrationData<hypothesis, NumericType, false>(mgb_d),
dd(real(0)),
dsig_ddeto(Dt)
{
using namespace std;
using namespace tfel::math;
using std::vector;
this->Yw = MarigoParametersInitializer::get().Yw;
this->g = MarigoParametersInitializer::get().g;
this->minimal_time_step_scaling_factor = MarigoParametersInitializer::get().minimal_time_step_scaling_factor;
this->maximal_time_step_scaling_factor = MarigoParametersInitializer::get().maximal_time_step_scaling_factor;
this-> eto = tfel::math::map<StrainStensor>(mgb_d.s0.gradients);
tfel::fsalgo::transform<StensorSize>::exe(mgb_d.s1.gradients,mgb_d.s0.gradients,this->deto.begin(),std::minus<real>());
this-> sig = tfel::math::map<StressStensor>(mgb_d.s0.thermodynamic_forces);
}

/*!
 * \ brief initialize the behaviour with user code
 */
void initialize(){
using namespace std;
using namespace tfel::math;
using std::vector;
#line 28 "Marigo.mfront"
this->lambda = computeLambda(this->young,this->nu);
#line 29 "Marigo.mfront"
this->mu     = computeMu(this->young,this->nu);
}

/*!
* \brief set the policy for "out of bounds" conditions
*/
void
setOutOfBoundsPolicy(const OutOfBoundsPolicy policy_value){
this->policy = policy_value;
} // end of setOutOfBoundsPolicy

/*!
* \return the modelling hypothesis
*/
constexpr ModellingHypothesis::Hypothesis
getModellingHypothesis() const{
return hypothesis;
} // end of getModellingHypothesis

/*!
* \brief check bounds
*/
void checkBounds() const{
} // end of checkBounds

IntegrationResult
computePredictionOperator(const SMFlag smflag,const SMType smt) override{
using namespace std;
using namespace tfel::math;
using std::vector;
tfel::raise_if(smflag!=MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::STANDARDTANGENTOPERATOR,
"invalid prediction operator flag");
#line 33 "Marigo.mfront"
if(smt==ELASTIC){
#line 34 "Marigo.mfront"
(this->Dt) = (this->lambda)*Stensor4::IxI()+2*(this->mu)*Stensor4::Id();
#line 35 "Marigo.mfront"
} else if(smt==SECANTOPERATOR){
#line 36 "Marigo.mfront"
(this->Dt) = (1-(this->d))*((this->lambda)*Stensor4::IxI()+2*(this->mu)*Stensor4::Id());
#line 37 "Marigo.mfront"
} else {
#line 38 "Marigo.mfront"
return FAILURE;
#line 39 "Marigo.mfront"
}return SUCCESS;
}

time getMinimalTimeStepScalingFactor() const noexcept override{
  return this->minimal_time_step_scaling_factor;
}

std::pair<bool, time>
computeAPrioriTimeStepScalingFactor(const time current_time_step_scaling_factor) const override{
const auto time_scaling_factor = this->computeAPrioriTimeStepScalingFactorII();
return {time_scaling_factor.first,
        std::min(std::min(std::max(time_scaling_factor.second,
                                   this->minimal_time_step_scaling_factor),
                          this->maximal_time_step_scaling_factor),
                  current_time_step_scaling_factor)};
}

/*!
* \brief Integrate behaviour  over the time step
*/
IntegrationResult
integrate(const SMFlag smflag, const SMType smt) override{
using namespace std;
using namespace tfel::math;
raise_if(smflag!=MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::STANDARDTANGENTOPERATOR,
"invalid tangent operator flag");
bool computeTangentOperator_ = smt!=NOSTIFFNESSREQUESTED;
#line 43 "Marigo.mfront"
const auto e  = eval(this->eto+this->deto);
#line 44 "Marigo.mfront"
const auto tr = trace(e);
#line 45 "Marigo.mfront"
const auto Y  = tr*tr*this->lambda/2+this->mu*(e|e);
#line 46 "Marigo.mfront"
const auto k  = this->Yw*power<2>((1+this->g)/(1+this->g-this->d));
#line 47 "Marigo.mfront"
if(Y>k){
#line 48 "Marigo.mfront"
this->d = min((1+this->g)*(1-sqrt(this->Yw/Y)),real(1));
#line 49 "Marigo.mfront"
}
#line 50 "Marigo.mfront"
this->sig = (1-this->d)*(this->lambda*tr*Stensor::Id()+2*this->mu*e);
this->updateIntegrationVariables();
this->updateStateVariables();
this->updateAuxiliaryStateVariables();
if(computeTangentOperator_){
if(!this->computeConsistentTangentOperator(smt)){
return MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::FAILURE;
}
}
return MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::SUCCESS;
}

std::pair<bool, time>
computeAPosterioriTimeStepScalingFactor(const time current_time_step_scaling_factor) const override{
const auto time_scaling_factor = this->computeAPosterioriTimeStepScalingFactorII();
return {time_scaling_factor.first,
        std::min(std::min(std::max(time_scaling_factor.second,
                                   this->minimal_time_step_scaling_factor),
                          this->maximal_time_step_scaling_factor),
                 current_time_step_scaling_factor)};
}

/*!
* \brief Update the internal energy at end of the time step
* \param[in] Psi_s: internal energy at end of the time step
*/
void computeInternalEnergy(real& Psi_s) const
{
Psi_s=0;
}

/*!
* \brief Update the dissipated energy at end of the time step
* \param[in] Psi_d: dissipated energy at end of the time step
*/
void computeDissipatedEnergy(real& Psi_d) const
{
Psi_d=0;
}

bool computeConsistentTangentOperator(const SMType smt){
using namespace std;
using namespace tfel::math;
using std::vector;
#line 54 "Marigo.mfront"
if(smt==ELASTIC){
#line 55 "Marigo.mfront"
this->Dt = this->lambda*Stensor4::IxI()+2*this->mu*Stensor4::Id();
#line 56 "Marigo.mfront"
} else if(smt==SECANTOPERATOR){
#line 57 "Marigo.mfront"
this->Dt = (1-this->d)*(this->lambda*Stensor4::IxI()+2*this->mu*Stensor4::Id());
#line 58 "Marigo.mfront"
} else if(smt==CONSISTENTTANGENTOPERATOR){
#line 59 "Marigo.mfront"
this->Dt = (1-this->d)*(this->lambda*Stensor4::IxI()+2*this->mu*Stensor4::Id());
#line 60 "Marigo.mfront"
} else {
#line 61 "Marigo.mfront"
return FAILURE;
#line 62 "Marigo.mfront"
}
return true;
}

/*!
* \brief compute the sound velocity
* \param[in] rho_m0: mass density in the reference configuration
*/
speed computeSpeedOfSound(const massdensity&) const {
return speed(0);

}

const TangentOperator& getTangentOperator() const{
return this->Dt;
}

void updateExternalStateVariables(){
this->eto  += this->deto;
this->T += this->dT;
}

//!
~Marigo()
 override = default;

private:

std::pair<bool, time> computeAPrioriTimeStepScalingFactorII() const{
return {true, this->maximal_time_step_scaling_factor};
}

std::pair<bool, time> computeAPosterioriTimeStepScalingFactorII() const{
return {true,this->maximal_time_step_scaling_factor};
}

//! policy for treating out of bounds conditions
OutOfBoundsPolicy policy = None;
}; // end of Marigo class

template<ModellingHypothesis::Hypothesis hypothesis, typename NumericType>
std::ostream&
operator <<(std::ostream& os,const Marigo<hypothesis, NumericType, false>& b)
{
os << "εᵗᵒ : " << b.eto << '\n';
os << "Δεᵗᵒ : " << b.deto << '\n';
os << "σ : " << b.sig << '\n';
os << "Δt : " << b.dt << '\n';
os << "young : " << b.young << '\n';
os << "nu : " << b.nu << '\n';
os << "d : " << b.d << '\n';
os << "Δd : " << b.dd << '\n';
os << "T : " << b.T << '\n';
os << "ΔT : " << b.dT << '\n';
os << "Yw : " << b.Yw << '\n';
os << "g : " << b.g << '\n';
os << "minimal_time_step_scaling_factor : " << b.minimal_time_step_scaling_factor << '\n';
os << "maximal_time_step_scaling_factor : " << b.maximal_time_step_scaling_factor << '\n';
return os;
}

/*!
* Partial specialisation for Marigo.
*/
template<ModellingHypothesis::Hypothesis hypothesis, typename NumericType>
class MechanicalBehaviourTraits<Marigo<hypothesis, NumericType, false> >
{
static constexpr unsigned short N = ModellingHypothesisToSpaceDimension<hypothesis>::value;
static constexpr unsigned short TVectorSize = N;
typedef tfel::math::StensorDimeToSize<N> StensorDimeToSize;
static constexpr unsigned short StensorSize = StensorDimeToSize::value;
typedef tfel::math::TensorDimeToSize<N> TensorDimeToSize;
static constexpr unsigned short TensorSize = TensorDimeToSize::value;
public:
static constexpr bool is_defined = true;
static constexpr bool use_quantities = false;
static constexpr bool hasStressFreeExpansion = false;
static constexpr bool handlesThermalExpansion = false;
static constexpr unsigned short dimension = N;
static constexpr unsigned short material_properties_nb = 2;
static constexpr unsigned short internal_variables_nb  = 1;
static constexpr unsigned short external_variables_nb  = 1;
static constexpr unsigned short external_variables_nb2 = 0u;
static constexpr bool hasConsistentTangentOperator = true;
static constexpr bool isConsistentTangentOperatorSymmetric = false;
static constexpr bool hasPredictionOperator = true;
static constexpr bool hasAPrioriTimeStepScalingFactor = false;
static constexpr bool hasComputeInternalEnergy = false;
static constexpr bool hasComputeDissipatedEnergy = false;
/*!
* \return the name of the class.
*/
static const char* getName(){
return "Marigo";
}

};

/*!
* Partial specialisation for Marigo.
*/
template<typename NumericType>
class MechanicalBehaviourTraits<Marigo<ModellingHypothesis::AXISYMMETRICALGENERALISEDPLANESTRESS, NumericType, false> >
{
public:
static constexpr bool is_defined = false;
static constexpr bool use_quantities = false;
static constexpr bool hasStressFreeExpansion = false;
static constexpr bool handlesThermalExpansion = false;
static constexpr unsigned short dimension = 0u;
static constexpr unsigned short material_properties_nb = 0u;
static constexpr unsigned short internal_variables_nb  = 0u;
static constexpr unsigned short external_variables_nb  = 0u;
static constexpr unsigned short external_variables_nb2 = 0u;
static constexpr bool hasConsistentTangentOperator = false;
static constexpr bool isConsistentTangentOperatorSymmetric = false;
static constexpr bool hasPredictionOperator = false;
static constexpr bool hasAPrioriTimeStepScalingFactor = false;
static constexpr bool hasComputeInternalEnergy = false;
static constexpr bool hasComputeDissipatedEnergy = false;
/*!
* \return the name of the class.
*/
static const char* getName(){
return "Marigo";
}

};

/*!
* Partial specialisation for Marigo.
*/
template<typename NumericType>
class MechanicalBehaviourTraits<Marigo<ModellingHypothesis::PLANESTRESS, NumericType, false> >
{
public:
static constexpr bool is_defined = false;
static constexpr bool use_quantities = false;
static constexpr bool hasStressFreeExpansion = false;
static constexpr bool handlesThermalExpansion = false;
static constexpr unsigned short dimension = 0u;
static constexpr unsigned short material_properties_nb = 0u;
static constexpr unsigned short internal_variables_nb  = 0u;
static constexpr unsigned short external_variables_nb  = 0u;
static constexpr unsigned short external_variables_nb2 = 0u;
static constexpr bool hasConsistentTangentOperator = false;
static constexpr bool isConsistentTangentOperatorSymmetric = false;
static constexpr bool hasPredictionOperator = false;
static constexpr bool hasAPrioriTimeStepScalingFactor = false;
static constexpr bool hasComputeInternalEnergy = false;
static constexpr bool hasComputeDissipatedEnergy = false;
/*!
* \return the name of the class.
*/
static const char* getName(){
return "Marigo";
}

};

} // end of namespace tfel::material

#endif /* LIB_TFELMATERIAL_MARIGO_HXX */
