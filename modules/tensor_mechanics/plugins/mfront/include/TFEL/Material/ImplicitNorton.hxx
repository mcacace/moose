/*!
* \file   TFEL/Material/ImplicitNorton.hxx
* \brief  this file implements the ImplicitNorton Behaviour.
*         File generated by tfel version 4.0.0-dev
* \author Thomas Helfer - modified
* \date   24 / 11 / 2016
 */

#ifndef LIB_TFELMATERIAL_IMPLICITNORTON_HXX
#define LIB_TFELMATERIAL_IMPLICITNORTON_HXX

#include<string>
#include<iostream>
#include<limits>
#include<stdexcept>
#include<algorithm>

#include"TFEL/Raise.hxx"
#include"TFEL/PhysicalConstants.hxx"
#include"TFEL/Config/TFELConfig.hxx"
#include"TFEL/Config/TFELTypes.hxx"
#include"TFEL/TypeTraits/IsFundamentalNumericType.hxx"
#include"TFEL/TypeTraits/IsReal.hxx"
#include"TFEL/Math/General/IEEE754.hxx"
#include"TFEL/Material/MaterialException.hxx"
#include"TFEL/Material/MechanicalBehaviour.hxx"
#include"TFEL/Material/MechanicalBehaviourTraits.hxx"
#include"TFEL/Material/OutOfBoundsPolicy.hxx"
#include"TFEL/Material/BoundsCheck.hxx"
#include"TFEL/Material/IsotropicPlasticity.hxx"
#include"TFEL/Material/Lame.hxx"
#include"TFEL/Material/Hosford1972YieldCriterion.hxx"
#include"TFEL/Material/ImplicitNortonBehaviourData.hxx"
#include"TFEL/Material/ImplicitNortonIntegrationData.hxx"

#include"TFEL/Math/Array/ViewsArray.hxx"
#include"TFEL/Math/tvector.hxx"
#include"TFEL/Math/Vector/tvectorIO.hxx"
#include"TFEL/Math/tmatrix.hxx"
#include"TFEL/Math/Matrix/tmatrixIO.hxx"
#include"TFEL/Math/st2tost2.hxx"
#include"TFEL/Math/ST2toST2/ST2toST2ConceptIO.hxx"
#include"TFEL/Math/TinyNewtonRaphsonSolver.hxx"
#include "MFront/GenericBehaviour/State.hxx"
#include "MFront/GenericBehaviour/BehaviourData.hxx"
namespace tfel::material{

struct ImplicitNortonAxisymmetricalGeneralisedPlaneStressParametersInitializer
{
static ImplicitNortonAxisymmetricalGeneralisedPlaneStressParametersInitializer&
get();


void set(const char* const,const double);

void set(const char* const,const unsigned short);

private :

ImplicitNortonAxisymmetricalGeneralisedPlaneStressParametersInitializer();

ImplicitNortonAxisymmetricalGeneralisedPlaneStressParametersInitializer(const ImplicitNortonAxisymmetricalGeneralisedPlaneStressParametersInitializer&);

ImplicitNortonAxisymmetricalGeneralisedPlaneStressParametersInitializer&
operator=(const ImplicitNortonAxisymmetricalGeneralisedPlaneStressParametersInitializer&);
/*!
 * \brief read the parameters from the given file
 * \param[out] pi : parameters initializer
 * \param[in]  fn : file name
 */
static void readParameters(ImplicitNortonAxisymmetricalGeneralisedPlaneStressParametersInitializer&,const char* const);
};

struct ImplicitNortonPlaneStressParametersInitializer
{
static ImplicitNortonPlaneStressParametersInitializer&
get();


void set(const char* const,const double);

void set(const char* const,const unsigned short);

private :

ImplicitNortonPlaneStressParametersInitializer();

ImplicitNortonPlaneStressParametersInitializer(const ImplicitNortonPlaneStressParametersInitializer&);

ImplicitNortonPlaneStressParametersInitializer&
operator=(const ImplicitNortonPlaneStressParametersInitializer&);
/*!
 * \brief read the parameters from the given file
 * \param[out] pi : parameters initializer
 * \param[in]  fn : file name
 */
static void readParameters(ImplicitNortonPlaneStressParametersInitializer&,const char* const);
};

struct ImplicitNortonParametersInitializer
{
static ImplicitNortonParametersInitializer&
get();

double relative_value_for_the_equivalent_stress_lower_bound;
double epsilon;
double theta;
double minimal_time_step_scaling_factor;
double maximal_time_step_scaling_factor;
double numerical_jacobian_epsilon;
unsigned short iterMax;

void set(const char* const,const double);

void set(const char* const,const unsigned short);

/*!
 * \brief convert a string to double
 * \param[in] p : parameter
 * \param[in] v : value
 */
static double getDouble(const std::string&,const std::string&);
/*!
 * \brief convert a string to unsigned short
 * \param[in] p : parameter
 * \param[in] v : value
 */
static unsigned short getUnsignedShort(const std::string&,const std::string&);
private :

ImplicitNortonParametersInitializer();

ImplicitNortonParametersInitializer(const ImplicitNortonParametersInitializer&);

ImplicitNortonParametersInitializer&
operator=(const ImplicitNortonParametersInitializer&);
/*!
 * \brief read the parameters from the given file
 * \param[out] pi : parameters initializer
 * \param[in]  fn : file name
 */
static void readParameters(ImplicitNortonParametersInitializer&,const char* const);
};

//! \brief forward declaration
template<ModellingHypothesis::Hypothesis, typename NumericType, bool use_qt>
class ImplicitNorton;

//! \brief forward declaration
template<ModellingHypothesis::Hypothesis hypothesis, typename NumericType>
std::ostream&
 operator <<(std::ostream&,const ImplicitNorton<hypothesis, NumericType, false>&);

//! \brief forward declaration
template<typename NumericType>
std::ostream&
 operator <<(std::ostream&,const ImplicitNorton<ModellingHypothesis::AXISYMMETRICALGENERALISEDPLANESTRESS, NumericType, false>&);

//! \brief forward declaration
template<typename NumericType>
std::ostream&
 operator <<(std::ostream&,const ImplicitNorton<ModellingHypothesis::PLANESTRESS, NumericType, false>&);

/*!
* \class ImplicitNorton
* \brief This class implements the ImplicitNorton behaviour.
* \tparam hypothesis: modelling hypothesis.
* \tparam NumericType: numerical type.
* \author Thomas Helfer - modified
* \date   24 / 11 / 2016
*/
template<ModellingHypothesis::Hypothesis hypothesis,typename NumericType>
struct ImplicitNorton<hypothesis, NumericType, false> final
: public MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>,
public ImplicitNortonBehaviourData<hypothesis, NumericType, false>,
public ImplicitNortonIntegrationData<hypothesis, NumericType, false>,
public tfel::math::TinyNewtonRaphsonSolver<1 + ModellingHypothesisToStensorSize<hypothesis>::value, NumericType, ImplicitNorton<hypothesis, NumericType, false>>{

static constexpr unsigned short N = ModellingHypothesisToSpaceDimension<hypothesis>::value;

static_assert(N==1||N==2||N==3);
static_assert(tfel::typetraits::IsFundamentalNumericType<NumericType>::cond);
static_assert(tfel::typetraits::IsReal<NumericType>::cond);

friend std::ostream& operator<< <>(std::ostream&,const ImplicitNorton&);

friend struct tfel::math::TinyNonLinearSolverBase<1 + ModellingHypothesisToStensorSize<hypothesis>::value, NumericType, ImplicitNorton>;
static constexpr unsigned short TVectorSize = N;
typedef tfel::math::StensorDimeToSize<N> StensorDimeToSize;
static constexpr unsigned short StensorSize = StensorDimeToSize::value;
typedef tfel::math::TensorDimeToSize<N> TensorDimeToSize;
static constexpr unsigned short TensorSize = TensorDimeToSize::value;

using ushort =  unsigned short;
using Types = tfel::config::Types<N, NumericType, false>;
using Type = NumericType;
using real = typename Types::real;
using time = typename Types::time;
using length = typename Types::length;
using frequency = typename Types::frequency;
using speed = typename Types::speed;
using stress = typename Types::stress;
using strain = typename Types::strain;
using strainrate = typename Types::strainrate;
using stressrate = typename Types::stressrate;
using temperature = typename Types::temperature;
using thermalexpansion = typename Types::thermalexpansion;
using thermalconductivity = typename Types::thermalconductivity;
using massdensity = typename Types::massdensity;
using energydensity = typename Types::energydensity;
using TVector = typename Types::TVector;
using DisplacementTVector = typename Types::DisplacementTVector;
using ForceTVector = typename Types::ForceTVector;
using HeatFlux = typename Types::HeatFlux;
using TemperatureGradient = typename Types::TemperatureGradient;
using Stensor = typename Types::Stensor;
using StressStensor = typename Types::StressStensor;
using StressRateStensor = typename Types::StressRateStensor;
using StrainStensor = typename Types::StrainStensor;
using StrainRateStensor = typename Types::StrainRateStensor;
using FrequencyStensor = typename Types::FrequencyStensor;
using Tensor = typename Types::Tensor;
using DeformationGradientTensor = typename Types::DeformationGradientTensor;
using StressTensor = typename Types::StressTensor;
using StiffnessTensor = typename Types::StiffnessTensor;
using Stensor4 = typename Types::Stensor4;
using TangentOperator = StiffnessTensor;
using PhysicalConstants = tfel::PhysicalConstants<NumericType, false>;

public :

typedef ImplicitNortonBehaviourData<hypothesis, NumericType, false> BehaviourData;
typedef ImplicitNortonIntegrationData<hypothesis, NumericType, false> IntegrationData;
typedef typename MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::SMFlag SMFlag;
typedef typename MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::SMType SMType;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::ELASTIC;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::SECANTOPERATOR;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::TANGENTOPERATOR;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::CONSISTENTTANGENTOPERATOR;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::NOSTIFFNESSREQUESTED;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::STANDARDTANGENTOPERATOR;
using IntegrationResult = typename MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::IntegrationResult;

using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::SUCCESS;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::FAILURE;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::UNRELIABLE_RESULTS;

using StressFreeExpansionType = StrainStensor;

private :



tfel::math::View<StrainStensor> deel;
#line 26 "ImplicitNorton.mfront"
real& dp;

#line 29 "ImplicitNorton.mfront"
stress lambda;
#line 30 "ImplicitNorton.mfront"
stress mu;
#line 31 "ImplicitNorton.mfront"
Stensor n;
struct{
stress lambda;
stress mu;
} sebdata;

real relative_value_for_the_equivalent_stress_lower_bound;
NumericType epsilon;
NumericType theta;
time minimal_time_step_scaling_factor;
time maximal_time_step_scaling_factor;
NumericType numerical_jacobian_epsilon;
ushort iterMax;

//! Tangent operator;
TangentOperator Dt;
//! alias to the tangent operator;
TangentOperator& dsig_ddeto;
// updating material properties, in mandatory
void updateMaterialPropertiesDependantOnStateVariables(){
using namespace std;
using namespace tfel::math;
using std::vector;
}

SMType stiffness_matrix_type;
void computeNumericalJacobian(tfel::math::tmatrix<1 + StensorSize,1 + StensorSize, NumericType>& njacobian)
{
using namespace std;
using namespace tfel::math;
tvector<1 + StensorSize, NumericType> tzeros(this->zeros);
tvector<1 + StensorSize, NumericType> tfzeros(this->fzeros);
tmatrix<1 + StensorSize,1 + StensorSize, NumericType> tjacobian(this->jacobian);
for(unsigned short idx = 0; idx!= 1 + StensorSize;++idx){
this->zeros(idx) -= this->numerical_jacobian_epsilon;
this->computeThermodynamicForces();
this->computeFdF(true);
this->zeros = tzeros;
tvector<1 + StensorSize, NumericType> tfzeros2(this->fzeros);
this->zeros(idx) += this->numerical_jacobian_epsilon;
this->computeThermodynamicForces();
this->computeFdF(true);
this->fzeros = (this->fzeros-tfzeros2) / (2 * (this->numerical_jacobian_epsilon));
for(unsigned short idx2 = 0; idx2!= 1 + StensorSize;++idx2){
njacobian(idx2,idx) = this->fzeros(idx2);
}
this->zeros    = tzeros;
this->fzeros   = tfzeros;
}
if(&njacobian!=&(this->jacobian)){
this->jacobian = tjacobian;
}
}

void
computePartialJacobianInvert(const tfel::math::TinyPermutation<1 + StensorSize>& jacobian_permutation, tfel::math::derivative_type<StrainStensor, StrainStensor>& partial_jacobian_eel)
{
using namespace tfel::math;
for(unsigned short idx=0;idx!=StensorSize;++idx){
tvector<1 + StensorSize, NumericType> vect_e(NumericType(0));
vect_e(idx) = NumericType(1);
TinyMatrixSolve<1 + StensorSize, NumericType>::back_substitute(this->jacobian,jacobian_permutation,vect_e);
for(unsigned short idx2=0u;idx2!=StensorSize;++idx2){
partial_jacobian_eel(idx2,idx)=vect_e(idx2);
}
}
}

void
computePartialJacobianInvert(const tfel::math::TinyPermutation<1 + StensorSize>& jacobian_permutation, tfel::math::derivative_type<StrainStensor, StrainStensor>& partial_jacobian_eel,
tfel::math::derivative_type<strain, StrainStensor>& partial_jacobian_p)
{
using namespace tfel::math;
for(unsigned short idx=0;idx!=StensorSize;++idx){
tvector<1 + StensorSize, NumericType> vect_e(NumericType(0));
vect_e(idx) = NumericType(1);
TinyMatrixSolve<1 + StensorSize, NumericType>::back_substitute(this->jacobian,jacobian_permutation,vect_e);
for(unsigned short idx2=0u;idx2!=StensorSize;++idx2){
partial_jacobian_eel(idx2,idx)=vect_e(idx2);
}
partial_jacobian_p(idx)=vect_e(StensorSize);
}
}

void computeThermodynamicForces(){
using namespace std;
using namespace tfel::math;
using std::vector;
this->sig = (this->sebdata.lambda)*trace(this->eel+(this->theta)*(this->deel))*Stensor::Id()+2*(this->sebdata.mu)*(this->eel+(this->theta)*(this->deel));

} // end of ImplicitNorton::computeThermodynamicForces

void computeFinalThermodynamicForces(){
using namespace std;
using namespace tfel::math;
using std::vector;
this->sig = (this->sebdata.lambda)*trace(this->eel)*Stensor::Id()+2*(this->sebdata.mu)*this->eel;

} // end of ImplicitNorton::computeFinalThermodynamicForces

/*!
* \brief Update internal variables at end of integration
*/
void updateIntegrationVariables(){
}

/*!
* \brief Update internal variables at end of integration
*/
void updateStateVariables(){
this->eel += this->deel;
this->p += this->dp;
}

/*!
* \brief Update auxiliary state variables at end of integration
*/
void updateAuxiliaryStateVariables()
{}

//! \brief return an elastic prediction of the stresses
StressStensor computeElasticPrediction() const{
return this->sebdata.lambda*trace(this->eel+(this->theta)*(this->deto))*Stensor::Id()+2*(this->sebdata.mu)*(this->eel+(this->theta)*(this->deto));
}


//! \brief Default constructor (disabled)
ImplicitNorton() =delete ;
//! \brief Copy constructor (disabled)
ImplicitNorton(const ImplicitNorton&) = delete;
//! \brief Assignement operator (disabled)
ImplicitNorton& operator = (const ImplicitNorton&) = delete;

public:

/*!
* \brief Constructor
*/
ImplicitNorton(const ImplicitNortonBehaviourData<hypothesis, NumericType, false>& src1,
const ImplicitNortonIntegrationData<hypothesis, NumericType, false>& src2)
: ImplicitNortonBehaviourData<hypothesis, NumericType, false>(src1),
ImplicitNortonIntegrationData<hypothesis, NumericType, false>(src2),
deel(tfel::math::map<StrainStensor, 0u>(this->zeros)),
dp(this->zeros(StensorSize)),
dsig_ddeto(Dt)
{
using namespace std;
using namespace tfel::math;
using std::vector;
this->relative_value_for_the_equivalent_stress_lower_bound = ImplicitNortonParametersInitializer::get().relative_value_for_the_equivalent_stress_lower_bound;
this->epsilon = ImplicitNortonParametersInitializer::get().epsilon;
this->theta = ImplicitNortonParametersInitializer::get().theta;
this->minimal_time_step_scaling_factor = ImplicitNortonParametersInitializer::get().minimal_time_step_scaling_factor;
this->maximal_time_step_scaling_factor = ImplicitNortonParametersInitializer::get().maximal_time_step_scaling_factor;
this->numerical_jacobian_epsilon = ImplicitNortonParametersInitializer::get().numerical_jacobian_epsilon;
this->iterMax = ImplicitNortonParametersInitializer::get().iterMax;
}

/*
 * \brief constructor for the Generic interface
 * \param[in] mgb_d: behaviour data
 */
ImplicitNorton(const mfront::gb::BehaviourData& mgb_d)
: ImplicitNortonBehaviourData<hypothesis, NumericType, false>(mgb_d),
ImplicitNortonIntegrationData<hypothesis, NumericType, false>(mgb_d),
deel(tfel::math::map<StrainStensor, 0u>(this->zeros)),
dp(this->zeros(StensorSize)),
dsig_ddeto(Dt)
{
using namespace std;
using namespace tfel::math;
using std::vector;
this->relative_value_for_the_equivalent_stress_lower_bound = ImplicitNortonParametersInitializer::get().relative_value_for_the_equivalent_stress_lower_bound;
this->epsilon = ImplicitNortonParametersInitializer::get().epsilon;
this->theta = ImplicitNortonParametersInitializer::get().theta;
this->minimal_time_step_scaling_factor = ImplicitNortonParametersInitializer::get().minimal_time_step_scaling_factor;
this->maximal_time_step_scaling_factor = ImplicitNortonParametersInitializer::get().maximal_time_step_scaling_factor;
this->numerical_jacobian_epsilon = ImplicitNortonParametersInitializer::get().numerical_jacobian_epsilon;
this->iterMax = ImplicitNortonParametersInitializer::get().iterMax;
this-> eto = tfel::math::map<StrainStensor>(mgb_d.s0.gradients);
tfel::fsalgo::transform<StensorSize>::exe(mgb_d.s1.gradients,mgb_d.s0.gradients,this->deto.begin(),std::minus<real>());
this-> sig = tfel::math::map<StressStensor>(mgb_d.s0.thermodynamic_forces);
}

/*!
 * \ brief initialize the behaviour with user code
 */
void initialize(){
using namespace std;
using namespace tfel::math;
using std::vector;
// initialisation Lame's coefficients
this->sebdata.lambda = tfel::material::computeLambda(this->young,this->nu);
this->sebdata.mu = tfel::material::computeMu(this->young,this->nu);

#line 35 "ImplicitNorton.mfront"
this->lambda = computeLambda(this->young, this->nu);
#line 36 "ImplicitNorton.mfront"
this->mu = computeMu(this->young, this->nu);
#line 37 "ImplicitNorton.mfront"
const auto sigel = computeElasticPrediction();
#line 38 "ImplicitNorton.mfront"
this->n = Stensor(0.);
}

/*!
* \brief set the policy for "out of bounds" conditions
*/
void
setOutOfBoundsPolicy(const OutOfBoundsPolicy policy_value){
this->policy = policy_value;
} // end of setOutOfBoundsPolicy

/*!
* \return the modelling hypothesis
*/
constexpr ModellingHypothesis::Hypothesis
getModellingHypothesis() const{
return hypothesis;
} // end of getModellingHypothesis

/*!
* \brief check bounds
*/
void checkBounds() const{
} // end of checkBounds

IntegrationResult
computePredictionOperator(const SMFlag smflag,const SMType smt) override{
using namespace std;
using namespace tfel::math;
using std::vector;
tfel::raise_if(smflag!=MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::STANDARDTANGENTOPERATOR,
"invalid prediction operator flag");
if((smt==ELASTIC)||(smt==SECANTOPERATOR)){
  computeAlteredElasticStiffness<hypothesis, stress>::exe(Dt,this->sebdata.lambda,this->sebdata.mu);
} else {
  return FAILURE;
}return SUCCESS;
}

time getMinimalTimeStepScalingFactor() const noexcept override{
  return this->minimal_time_step_scaling_factor;
}

std::pair<bool, time>
computeAPrioriTimeStepScalingFactor(const time current_time_step_scaling_factor) const override{
const auto time_scaling_factor = this->computeAPrioriTimeStepScalingFactorII();
return {time_scaling_factor.first,
        std::min(std::min(std::max(time_scaling_factor.second,
                                   this->minimal_time_step_scaling_factor),
                          this->maximal_time_step_scaling_factor),
                  current_time_step_scaling_factor)};
}

/*!
 * \brief Integrate behaviour law over the time step
 */
IntegrationResult integrate(const SMFlag smflag,const SMType smt) override{
using namespace std;
using namespace tfel::math;
this->stiffness_matrix_type = smt;
tfel::raise_if(smflag!=MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::STANDARDTANGENTOPERATOR,
"invalid tangent operator flag");
tfel::math::TinyNewtonRaphsonSolver<1 + ModellingHypothesisToStensorSize<hypothesis>::value, NumericType, ImplicitNorton<hypothesis, NumericType, false>>::epsilon = this->epsilon;
tfel::math::TinyNewtonRaphsonSolver<1 + ModellingHypothesisToStensorSize<hypothesis>::value, NumericType, ImplicitNorton<hypothesis, NumericType, false>>::iterMax = this->iterMax;
if(!this->solveNonLinearSystem()){
return MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::FAILURE;
}
if (this->stiffness_matrix_type != NOSTIFFNESSREQUESTED){
this->updateOrCheckJacobian();
}
this->updateIntegrationVariables();
this->updateStateVariables();
this->computeFinalThermodynamicForces();
this->updateAuxiliaryStateVariables();
if(smt!=NOSTIFFNESSREQUESTED){
if(!this->computeConsistentTangentOperator(smt)){
return MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::FAILURE;
}
}
return MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::SUCCESS;
} // end of ImplicitNorton::integrate

bool computeResidual(){
this->computeThermodynamicForces();
return this->computeFdF(false);
}
//! \return the norm of the residual
NumericType computeResidualNorm() {
return tfel::math::norm(this->fzeros) / (1 + StensorSize);
}
/*!
 * \brief check the convergence of the method
 * \param[in] error: current error
 */
bool checkConvergence(const NumericType error) {
auto converged = error < this->epsilon;
return converged;
}
/*!
 * \brief update the jacobian matrix if required.
 * \param[in] converged: boolean stating if the method is
 * called after the convergence of the algorithm or before  * the computation of the next correction.
 *
 * This method can be used to compute the jacobian or part  * of the jacobian numerically. If the jacobian was computed
 * in `computeResidual`, this method can be used to compare it  * to a numerical approximation.
 */
void updateOrCheckJacobian(){
};
/*!
 * \brief method meant to set bounds on some components  * of the current Newton correction or to implement a line  * search.
 */
void processNewCorrection()
{
};
/*!
 * \brief method meant to process the new estimate.
 *
 * This method may be called to apply bounds on the  * new estimate.
 */
void processNewEstimate(){
this->updateMaterialPropertiesDependantOnStateVariables();
}
/*!
 * \brief solve linear system
 * \return true on success
 * \param[in] m: matrix
 * \param[in,out] v: right hand side on input, solution on output
 */
bool solveLinearSystem(tfel::math::tmatrix<1 + StensorSize, 1 + StensorSize, NumericType>& mfront_matrix,tfel::math::tvector<1 + StensorSize, NumericType>& mfront_vector)const noexcept{
auto mfront_success = true;
mfront_success = tfel::math::TinyMatrixSolve<1 + StensorSize, NumericType, false>::exe(mfront_matrix, mfront_vector);
return mfront_success;
}
/*!
* \brief compute fzeros and jacobian
*/
bool computeFdF(const bool perturbatedSystemEvaluation){
using namespace std;
using namespace tfel::math;
using std::vector;
// silent compiler warning
static_cast<void>(perturbatedSystemEvaluation); 
constexpr auto eel_offset = 0u;
static_cast<void>(eel_offset);
auto feel = tfel::math::map<StrainStensor, 0u>(this->fzeros);
constexpr auto p_offset = StensorSize;
static_cast<void>(p_offset);
real& fp(this->fzeros(StensorSize));
// derivative of residual feel with respect to variable eel
auto&& dfeel_ddeel = tfel::math::map_derivative<0u, 0u, StrainStensor, StrainStensor>(this->jacobian);
// derivative of residual feel with respect to variable p
auto&& dfeel_ddp = tfel::math::map_derivative<0u, StensorSize, StrainStensor, strain>(this->jacobian);
// derivative of residual fp with respect to variable eel
auto&& dfp_ddeel = tfel::math::map_derivative<StensorSize, 0u, strain, StrainStensor>(this->jacobian);
// derivative of residual fp with respect to variable p
auto&& dfp_ddp = tfel::math::map_derivative<StensorSize, StensorSize, strain, strain>(this->jacobian);
// setting jacobian to identity
std::fill(this->jacobian.begin(),this->jacobian.end(), NumericType(0));
for(unsigned short idx = 0; idx != 1 + StensorSize; ++idx){
this->jacobian(idx, idx) = NumericType(1);
}
// setting f values to zeros
this->fzeros = this->zeros;
feel -= this->deto;
#line 42 "ImplicitNorton.mfront"
stress iseq = 0.;
#line 43 "ImplicitNorton.mfront"
Stensor s_dev = deviator((this->sig));
#line 44 "ImplicitNorton.mfront"
const stress seq = sqrt(2 * (s_dev | s_dev) / 3);
#line 45 "ImplicitNorton.mfront"
real aux;
#line 46 "ImplicitNorton.mfront"
if ((this->T)>0){
#line 47 "ImplicitNorton.mfront"
aux = exp(-(this->Qact)/(this->r_const)/(this->T));
#line 48 "ImplicitNorton.mfront"
}else{
#line 49 "ImplicitNorton.mfront"
aux = 1.;
#line 50 "ImplicitNorton.mfront"
}
#line 51 "ImplicitNorton.mfront"
const auto tmp = (this->A_creep)*pow(seq,(this->n_creep)-1.)*aux;
#line 52 "ImplicitNorton.mfront"
const auto df_dseq = (this->n_creep)*tmp;
#line 53 "ImplicitNorton.mfront"
if (seq>1e-15){
#line 54 "ImplicitNorton.mfront"
(this->n) = s_dev/seq;
#line 55 "ImplicitNorton.mfront"
iseq = 1/seq;
#line 56 "ImplicitNorton.mfront"
}
#line 58 "ImplicitNorton.mfront"
feel += (this->dp)*(this->n);
#line 59 "ImplicitNorton.mfront"
fp   -= tmp*seq*(this->dt);
#line 61 "ImplicitNorton.mfront"
dfeel_ddeel += 2.*(this->mu)*theta*(this->dp)*iseq*(Stensor4::M()-((this->n)^(this->n)));
#line 62 "ImplicitNorton.mfront"
dfeel_ddp    = (this->n);
#line 63 "ImplicitNorton.mfront"
dfp_ddeel    = -2*(this->mu)*theta*df_dseq*(this->dt)*(this->n);
static_cast<void>(dfeel_ddeel); /* suppress potential warnings */
static_cast<void>(dfeel_ddp); /* suppress potential warnings */
static_cast<void>(dfp_ddeel); /* suppress potential warnings */
static_cast<void>(dfp_ddp); /* suppress potential warnings */
return true;
}

std::pair<bool, time>
computeAPosterioriTimeStepScalingFactor(const time current_time_step_scaling_factor) const override{
const auto time_scaling_factor = this->computeAPosterioriTimeStepScalingFactorII();
return {time_scaling_factor.first,
        std::min(std::min(std::max(time_scaling_factor.second,
                                   this->minimal_time_step_scaling_factor),
                          this->maximal_time_step_scaling_factor),
                 current_time_step_scaling_factor)};
}

/*!
* \brief Update the internal energy at end of the time step
* \param[in] Psi_s: internal energy at end of the time step
*/
void computeInternalEnergy(real& Psi_s) const
{
Psi_s=0;
}

/*!
* \brief Update the dissipated energy at end of the time step
* \param[in] Psi_d: dissipated energy at end of the time step
*/
void computeDissipatedEnergy(real& Psi_d) const
{
Psi_d=0;
}

bool computeConsistentTangentOperator(const SMType smt){
using namespace std;
using namespace tfel::math;
using std::vector;
TinyPermutation<1 + StensorSize> jacobian_permutation;
TinyMatrixSolve<1 + StensorSize, NumericType>::decomp(this->jacobian,jacobian_permutation);
struct TFEL_VISIBILITY_LOCAL GetPartialJacobianInvert{
GetPartialJacobianInvert(ImplicitNorton& b,
const tfel::math::TinyPermutation<1 + StensorSize>& p)
: behaviour(b),
permutation(p)
{}
void operator()(tfel::math::derivative_type<StrainStensor, StrainStensor>& partial_jacobian_eel){
this->behaviour.computePartialJacobianInvert(this->permutation, partial_jacobian_eel);
}
void operator()(tfel::math::derivative_type<StrainStensor, StrainStensor>& partial_jacobian_eel,
tfel::math::derivative_type<strain, StrainStensor>& partial_jacobian_p){
this->behaviour.computePartialJacobianInvert(this->permutation, partial_jacobian_eel,
partial_jacobian_p);
}
private:
ImplicitNorton& behaviour;
const tfel::math::TinyPermutation<1 + StensorSize>& permutation;
}; // end of struct GetPartialJacobianInvert
GetPartialJacobianInvert getPartialJacobianInvert(*this, jacobian_permutation);
if((smt==ELASTIC)||(smt==SECANTOPERATOR)){
computeAlteredElasticStiffness<hypothesis, stress>::exe(Dt,this->sebdata.lambda,this->sebdata.mu);
} else if (smt==CONSISTENTTANGENTOPERATOR){
StiffnessTensor Hooke;
Stensor4 Je;
computeElasticStiffness<N, stress>::exe(Hooke,this->sebdata.lambda,this->sebdata.mu);
getPartialJacobianInvert(Je);
Dt = Hooke*Je;
} else {
  return false;
}
return true;
}

/*!
* \brief compute the sound velocity
* \param[in] rho_m0: mass density in the reference configuration
*/
speed computeSpeedOfSound(const massdensity&) const {
return speed(0);

}

const TangentOperator& getTangentOperator() const{
return this->Dt;
}

void updateExternalStateVariables(){
this->eto  += this->deto;
this->T += this->dT;
}

//!
~ImplicitNorton()
 override = default;

private:

std::pair<bool, time> computeAPrioriTimeStepScalingFactorII() const{
return {true, this->maximal_time_step_scaling_factor};
}

std::pair<bool, time> computeAPosterioriTimeStepScalingFactorII() const{
return {true,this->maximal_time_step_scaling_factor};
}

//! policy for treating out of bounds conditions
OutOfBoundsPolicy policy = None;
}; // end of ImplicitNorton class

template<ModellingHypothesis::Hypothesis hypothesis, typename NumericType>
std::ostream&
operator <<(std::ostream& os,const ImplicitNorton<hypothesis, NumericType, false>& b)
{
os << "εᵗᵒ : " << b.eto << '\n';
os << "Δεᵗᵒ : " << b.deto << '\n';
os << "σ : " << b.sig << '\n';
os << "Δt : " << b.dt << '\n';
os << "young : " << b.young << '\n';
os << "nu : " << b.nu << '\n';
os << "Qact : " << b.Qact << '\n';
os << "A_creep : " << b.A_creep << '\n';
os << "n_creep : " << b.n_creep << '\n';
os << "r_const : " << b.r_const << '\n';
os << "εᵉˡ : " << b.eel << '\n';
os << "Δεᵉˡ : " << b.deel << '\n';
os << "p : " << b.p << '\n';
os << "Δp : " << b.dp << '\n';
os << "T : " << b.T << '\n';
os << "ΔT : " << b.dT << '\n';
os << "n : " << b.n << '\n';
os << "relative_value_for_the_equivalent_stress_lower_bound : " << b.relative_value_for_the_equivalent_stress_lower_bound << '\n';
os << "ε : " << b.epsilon << '\n';
os << "θ : " << b.theta << '\n';
os << "minimal_time_step_scaling_factor : " << b.minimal_time_step_scaling_factor << '\n';
os << "maximal_time_step_scaling_factor : " << b.maximal_time_step_scaling_factor << '\n';
os << "numerical_jacobian_epsilon : " << b.numerical_jacobian_epsilon << '\n';
os << "iterMax : " << b.iterMax << '\n';
return os;
}

/*!
* \class ImplicitNorton
* \brief This class implements the ImplicitNorton behaviour.
* \tparam hypothesis: modelling hypothesis.
* \tparam NumericType: numerical type.
* \author Thomas Helfer - modified
* \date   24 / 11 / 2016
*/
template<typename NumericType>
struct ImplicitNorton<ModellingHypothesis::AXISYMMETRICALGENERALISEDPLANESTRESS, NumericType, false> final
: public MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,ModellingHypothesis::AXISYMMETRICALGENERALISEDPLANESTRESS, NumericType, false>,
public ImplicitNortonBehaviourData<ModellingHypothesis::AXISYMMETRICALGENERALISEDPLANESTRESS, NumericType, false>,
public ImplicitNortonIntegrationData<ModellingHypothesis::AXISYMMETRICALGENERALISEDPLANESTRESS, NumericType, false>,
public tfel::math::TinyNewtonRaphsonSolver<2 + ModellingHypothesisToStensorSize<ModellingHypothesis::AXISYMMETRICALGENERALISEDPLANESTRESS>::value, NumericType, ImplicitNorton<ModellingHypothesis::AXISYMMETRICALGENERALISEDPLANESTRESS, NumericType, false>>{

static constexpr ModellingHypothesis::Hypothesis hypothesis = ModellingHypothesis::AXISYMMETRICALGENERALISEDPLANESTRESS;
static constexpr unsigned short N = ModellingHypothesisToSpaceDimension<hypothesis>::value;

static_assert(N==1||N==2||N==3);
static_assert(tfel::typetraits::IsFundamentalNumericType<NumericType>::cond);
static_assert(tfel::typetraits::IsReal<NumericType>::cond);

friend std::ostream& operator<< <>(std::ostream&,const ImplicitNorton&);

friend struct tfel::math::TinyNonLinearSolverBase<2 + ModellingHypothesisToStensorSize<ModellingHypothesis::AXISYMMETRICALGENERALISEDPLANESTRESS>::value, NumericType, ImplicitNorton>;
static constexpr unsigned short TVectorSize = N;
typedef tfel::math::StensorDimeToSize<N> StensorDimeToSize;
static constexpr unsigned short StensorSize = StensorDimeToSize::value;
typedef tfel::math::TensorDimeToSize<N> TensorDimeToSize;
static constexpr unsigned short TensorSize = TensorDimeToSize::value;

using ushort =  unsigned short;
using Types = tfel::config::Types<N, NumericType, false>;
using Type = NumericType;
using real = typename Types::real;
using time = typename Types::time;
using length = typename Types::length;
using frequency = typename Types::frequency;
using speed = typename Types::speed;
using stress = typename Types::stress;
using strain = typename Types::strain;
using strainrate = typename Types::strainrate;
using stressrate = typename Types::stressrate;
using temperature = typename Types::temperature;
using thermalexpansion = typename Types::thermalexpansion;
using thermalconductivity = typename Types::thermalconductivity;
using massdensity = typename Types::massdensity;
using energydensity = typename Types::energydensity;
using TVector = typename Types::TVector;
using DisplacementTVector = typename Types::DisplacementTVector;
using ForceTVector = typename Types::ForceTVector;
using HeatFlux = typename Types::HeatFlux;
using TemperatureGradient = typename Types::TemperatureGradient;
using Stensor = typename Types::Stensor;
using StressStensor = typename Types::StressStensor;
using StressRateStensor = typename Types::StressRateStensor;
using StrainStensor = typename Types::StrainStensor;
using StrainRateStensor = typename Types::StrainRateStensor;
using FrequencyStensor = typename Types::FrequencyStensor;
using Tensor = typename Types::Tensor;
using DeformationGradientTensor = typename Types::DeformationGradientTensor;
using StressTensor = typename Types::StressTensor;
using StiffnessTensor = typename Types::StiffnessTensor;
using Stensor4 = typename Types::Stensor4;
using TangentOperator = StiffnessTensor;
using PhysicalConstants = tfel::PhysicalConstants<NumericType, false>;

public :

typedef ImplicitNortonBehaviourData<hypothesis, NumericType, false> BehaviourData;
typedef ImplicitNortonIntegrationData<hypothesis, NumericType, false> IntegrationData;
typedef typename MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::SMFlag SMFlag;
typedef typename MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::SMType SMType;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::ELASTIC;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::SECANTOPERATOR;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::TANGENTOPERATOR;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::CONSISTENTTANGENTOPERATOR;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::NOSTIFFNESSREQUESTED;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::STANDARDTANGENTOPERATOR;
using IntegrationResult = typename MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::IntegrationResult;

using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::SUCCESS;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::FAILURE;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::UNRELIABLE_RESULTS;

using StressFreeExpansionType = StrainStensor;

private :



tfel::math::View<StrainStensor> deel;
#line 26 "ImplicitNorton.mfront"
real& dp;
real& detozz;

#line 29 "ImplicitNorton.mfront"
stress lambda;
#line 30 "ImplicitNorton.mfront"
stress mu;
#line 31 "ImplicitNorton.mfront"
Stensor n;
struct{
stress lambda;
stress mu;
stress szz;
} sebdata;

real relative_value_for_the_equivalent_stress_lower_bound;
NumericType epsilon;
NumericType theta;
time minimal_time_step_scaling_factor;
time maximal_time_step_scaling_factor;
NumericType numerical_jacobian_epsilon;
ushort iterMax;

//! Tangent operator;
TangentOperator Dt;
//! alias to the tangent operator;
TangentOperator& dsig_ddeto;
// updating material properties, in mandatory
void updateMaterialPropertiesDependantOnStateVariables(){
using namespace std;
using namespace tfel::math;
using std::vector;
}

SMType stiffness_matrix_type;
void computeNumericalJacobian(tfel::math::tmatrix<2 + StensorSize,2 + StensorSize, NumericType>& njacobian)
{
using namespace std;
using namespace tfel::math;
tvector<2 + StensorSize, NumericType> tzeros(this->zeros);
tvector<2 + StensorSize, NumericType> tfzeros(this->fzeros);
tmatrix<2 + StensorSize,2 + StensorSize, NumericType> tjacobian(this->jacobian);
for(unsigned short idx = 0; idx!= 2 + StensorSize;++idx){
this->zeros(idx) -= this->numerical_jacobian_epsilon;
this->computeThermodynamicForces();
this->computeFdF(true);
this->zeros = tzeros;
tvector<2 + StensorSize, NumericType> tfzeros2(this->fzeros);
this->zeros(idx) += this->numerical_jacobian_epsilon;
this->computeThermodynamicForces();
this->computeFdF(true);
this->fzeros = (this->fzeros-tfzeros2) / (2 * (this->numerical_jacobian_epsilon));
for(unsigned short idx2 = 0; idx2!= 2 + StensorSize;++idx2){
njacobian(idx2,idx) = this->fzeros(idx2);
}
this->zeros    = tzeros;
this->fzeros   = tfzeros;
}
if(&njacobian!=&(this->jacobian)){
this->jacobian = tjacobian;
}
}

void
computePartialJacobianInvert(const tfel::math::TinyPermutation<2 + StensorSize>& jacobian_permutation, tfel::math::derivative_type<StrainStensor, StrainStensor>& partial_jacobian_eel)
{
using namespace tfel::math;
for(unsigned short idx=0;idx!=StensorSize;++idx){
tvector<2 + StensorSize, NumericType> vect_e(NumericType(0));
vect_e(idx) = NumericType(1);
TinyMatrixSolve<2 + StensorSize, NumericType>::back_substitute(this->jacobian,jacobian_permutation,vect_e);
for(unsigned short idx2=0u;idx2!=StensorSize;++idx2){
partial_jacobian_eel(idx2,idx)=vect_e(idx2);
}
}
}

void
computePartialJacobianInvert(const tfel::math::TinyPermutation<2 + StensorSize>& jacobian_permutation, tfel::math::derivative_type<StrainStensor, StrainStensor>& partial_jacobian_eel,
tfel::math::derivative_type<strain, StrainStensor>& partial_jacobian_p)
{
using namespace tfel::math;
for(unsigned short idx=0;idx!=StensorSize;++idx){
tvector<2 + StensorSize, NumericType> vect_e(NumericType(0));
vect_e(idx) = NumericType(1);
TinyMatrixSolve<2 + StensorSize, NumericType>::back_substitute(this->jacobian,jacobian_permutation,vect_e);
for(unsigned short idx2=0u;idx2!=StensorSize;++idx2){
partial_jacobian_eel(idx2,idx)=vect_e(idx2);
}
partial_jacobian_p(idx)=vect_e(StensorSize);
}
}

void
computePartialJacobianInvert(const tfel::math::TinyPermutation<2 + StensorSize>& jacobian_permutation, tfel::math::derivative_type<StrainStensor, StrainStensor>& partial_jacobian_eel,
tfel::math::derivative_type<strain, StrainStensor>& partial_jacobian_p,
tfel::math::derivative_type<strain, StrainStensor>& partial_jacobian_etozz)
{
using namespace tfel::math;
for(unsigned short idx=0;idx!=StensorSize;++idx){
tvector<2 + StensorSize, NumericType> vect_e(NumericType(0));
vect_e(idx) = NumericType(1);
TinyMatrixSolve<2 + StensorSize, NumericType>::back_substitute(this->jacobian,jacobian_permutation,vect_e);
for(unsigned short idx2=0u;idx2!=StensorSize;++idx2){
partial_jacobian_eel(idx2,idx)=vect_e(idx2);
}
partial_jacobian_p(idx)=vect_e(StensorSize);
partial_jacobian_etozz(idx)=vect_e(1 + StensorSize);
}
}

void computeThermodynamicForces(){
using namespace std;
using namespace tfel::math;
using std::vector;
this->sig = (this->sebdata.lambda)*trace(this->eel+(this->theta)*(this->deel))*Stensor::Id()+2*(this->sebdata.mu)*(this->eel+(this->theta)*(this->deel));

} // end of ImplicitNorton::computeThermodynamicForces

void computeFinalThermodynamicForces(){
using namespace std;
using namespace tfel::math;
using std::vector;
this->sig = (this->sebdata.lambda)*trace(this->eel)*Stensor::Id()+2*(this->sebdata.mu)*this->eel;

} // end of ImplicitNorton::computeFinalThermodynamicForces

/*!
* \brief Update internal variables at end of integration
*/
void updateIntegrationVariables(){
}

/*!
* \brief Update internal variables at end of integration
*/
void updateStateVariables(){
this->eel += this->deel;
this->p += this->dp;
this->etozz += this->detozz;
}

/*!
* \brief Update auxiliary state variables at end of integration
*/
void updateAuxiliaryStateVariables()
{}

//! \brief return an elastic prediction of the stresses
StressStensor computeElasticPrediction() const{
StressStensor prediction_stress;
StrainStensor prediction_strain = this->eel+(this->theta)*this->deto;
prediction_stress(0) = 2*(this->sebdata.mu)*((this->sebdata.lambda)/(this->sebdata.lambda+2*(this->sebdata.mu))*(prediction_strain(0)+prediction_strain(2))+prediction_strain(0))+
(this->sebdata.lambda)/(this->sebdata.lambda+2*(this->sebdata.mu))*(this->sigzz+(this->theta)*(this->dsigzz));
prediction_stress(2) = 2*(this->sebdata.mu)*((this->sebdata.lambda)/(this->sebdata.lambda+2*(this->sebdata.mu))*(prediction_strain(0)+prediction_strain(2))+prediction_strain(2))+
(this->sebdata.lambda)/(this->sebdata.lambda+2*(this->sebdata.mu))*(this->sigzz+(this->theta)*(this->dsigzz));
prediction_stress(1) = this->sigzz+(this->theta)*(this->dsigzz);
return prediction_stress;
}


//! \brief Default constructor (disabled)
ImplicitNorton() =delete ;
//! \brief Copy constructor (disabled)
ImplicitNorton(const ImplicitNorton&) = delete;
//! \brief Assignement operator (disabled)
ImplicitNorton& operator = (const ImplicitNorton&) = delete;

public:

/*!
* \brief Constructor
*/
ImplicitNorton(const ImplicitNortonBehaviourData<hypothesis, NumericType, false>& src1,
const ImplicitNortonIntegrationData<hypothesis, NumericType, false>& src2)
: ImplicitNortonBehaviourData<hypothesis, NumericType, false>(src1),
ImplicitNortonIntegrationData<hypothesis, NumericType, false>(src2),
deel(tfel::math::map<StrainStensor, 0u>(this->zeros)),
dp(this->zeros(StensorSize)),
detozz(this->zeros(1 + StensorSize)),
dsig_ddeto(Dt)
{
using namespace std;
using namespace tfel::math;
using std::vector;
this->relative_value_for_the_equivalent_stress_lower_bound = ImplicitNortonParametersInitializer::get().relative_value_for_the_equivalent_stress_lower_bound;
this->epsilon = ImplicitNortonParametersInitializer::get().epsilon;
this->theta = ImplicitNortonParametersInitializer::get().theta;
this->minimal_time_step_scaling_factor = ImplicitNortonParametersInitializer::get().minimal_time_step_scaling_factor;
this->maximal_time_step_scaling_factor = ImplicitNortonParametersInitializer::get().maximal_time_step_scaling_factor;
this->numerical_jacobian_epsilon = ImplicitNortonParametersInitializer::get().numerical_jacobian_epsilon;
this->iterMax = ImplicitNortonParametersInitializer::get().iterMax;
}

/*
 * \brief constructor for the Generic interface
 * \param[in] mgb_d: behaviour data
 */
ImplicitNorton(const mfront::gb::BehaviourData& mgb_d)
: ImplicitNortonBehaviourData<hypothesis, NumericType, false>(mgb_d),
ImplicitNortonIntegrationData<hypothesis, NumericType, false>(mgb_d),
deel(tfel::math::map<StrainStensor, 0u>(this->zeros)),
dp(this->zeros(StensorSize)),
detozz(this->zeros(1 + StensorSize)),
dsig_ddeto(Dt)
{
using namespace std;
using namespace tfel::math;
using std::vector;
this->relative_value_for_the_equivalent_stress_lower_bound = ImplicitNortonParametersInitializer::get().relative_value_for_the_equivalent_stress_lower_bound;
this->epsilon = ImplicitNortonParametersInitializer::get().epsilon;
this->theta = ImplicitNortonParametersInitializer::get().theta;
this->minimal_time_step_scaling_factor = ImplicitNortonParametersInitializer::get().minimal_time_step_scaling_factor;
this->maximal_time_step_scaling_factor = ImplicitNortonParametersInitializer::get().maximal_time_step_scaling_factor;
this->numerical_jacobian_epsilon = ImplicitNortonParametersInitializer::get().numerical_jacobian_epsilon;
this->iterMax = ImplicitNortonParametersInitializer::get().iterMax;
this-> eto = tfel::math::map<StrainStensor>(mgb_d.s0.gradients);
tfel::fsalgo::transform<StensorSize>::exe(mgb_d.s1.gradients,mgb_d.s0.gradients,this->deto.begin(),std::minus<real>());
this-> sig = tfel::math::map<StressStensor>(mgb_d.s0.thermodynamic_forces);
}

/*!
 * \ brief initialize the behaviour with user code
 */
void initialize(){
using namespace std;
using namespace tfel::math;
using std::vector;
// initialisation Lame's coefficients
this->sebdata.lambda = tfel::material::computeLambda(this->young,this->nu);
this->sebdata.mu = tfel::material::computeMu(this->young,this->nu);

#line 35 "ImplicitNorton.mfront"
this->lambda = computeLambda(this->young, this->nu);
#line 36 "ImplicitNorton.mfront"
this->mu = computeMu(this->young, this->nu);
#line 37 "ImplicitNorton.mfront"
const auto sigel = computeElasticPrediction();
#line 38 "ImplicitNorton.mfront"
this->n = Stensor(0.);
}

/*!
* \brief set the policy for "out of bounds" conditions
*/
void
setOutOfBoundsPolicy(const OutOfBoundsPolicy policy_value){
this->policy = policy_value;
} // end of setOutOfBoundsPolicy

/*!
* \return the modelling hypothesis
*/
constexpr ModellingHypothesis::Hypothesis
getModellingHypothesis() const{
return hypothesis;
} // end of getModellingHypothesis

/*!
* \brief check bounds
*/
void checkBounds() const{
} // end of checkBounds

IntegrationResult
computePredictionOperator(const SMFlag smflag,const SMType smt) override{
using namespace std;
using namespace tfel::math;
using std::vector;
tfel::raise_if(smflag!=MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::STANDARDTANGENTOPERATOR,
"invalid prediction operator flag");
if((smt==ELASTIC)||(smt==SECANTOPERATOR)){
  computeAlteredElasticStiffness<hypothesis, stress>::exe(Dt,this->sebdata.lambda,this->sebdata.mu);
} else {
  return FAILURE;
}return SUCCESS;
}

time getMinimalTimeStepScalingFactor() const noexcept override{
  return this->minimal_time_step_scaling_factor;
}

std::pair<bool, time>
computeAPrioriTimeStepScalingFactor(const time current_time_step_scaling_factor) const override{
const auto time_scaling_factor = this->computeAPrioriTimeStepScalingFactorII();
return {time_scaling_factor.first,
        std::min(std::min(std::max(time_scaling_factor.second,
                                   this->minimal_time_step_scaling_factor),
                          this->maximal_time_step_scaling_factor),
                  current_time_step_scaling_factor)};
}

/*!
 * \brief Integrate behaviour law over the time step
 */
IntegrationResult integrate(const SMFlag smflag,const SMType smt) override{
using namespace std;
using namespace tfel::math;
this->stiffness_matrix_type = smt;
tfel::raise_if(smflag!=MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::STANDARDTANGENTOPERATOR,
"invalid tangent operator flag");
tfel::math::TinyNewtonRaphsonSolver<2 + ModellingHypothesisToStensorSize<ModellingHypothesis::AXISYMMETRICALGENERALISEDPLANESTRESS>::value, NumericType, ImplicitNorton<ModellingHypothesis::AXISYMMETRICALGENERALISEDPLANESTRESS, NumericType, false>>::epsilon = this->epsilon;
tfel::math::TinyNewtonRaphsonSolver<2 + ModellingHypothesisToStensorSize<ModellingHypothesis::AXISYMMETRICALGENERALISEDPLANESTRESS>::value, NumericType, ImplicitNorton<ModellingHypothesis::AXISYMMETRICALGENERALISEDPLANESTRESS, NumericType, false>>::iterMax = this->iterMax;
if(!this->solveNonLinearSystem()){
return MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::FAILURE;
}
if (this->stiffness_matrix_type != NOSTIFFNESSREQUESTED){
this->updateOrCheckJacobian();
}
this->updateIntegrationVariables();
this->updateStateVariables();
this->computeFinalThermodynamicForces();
this->updateAuxiliaryStateVariables();
if(smt!=NOSTIFFNESSREQUESTED){
if(!this->computeConsistentTangentOperator(smt)){
return MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::FAILURE;
}
}
return MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::SUCCESS;
} // end of ImplicitNorton::integrate

bool computeResidual(){
this->computeThermodynamicForces();
return this->computeFdF(false);
}
//! \return the norm of the residual
NumericType computeResidualNorm() {
return tfel::math::norm(this->fzeros) / (2 + StensorSize);
}
/*!
 * \brief check the convergence of the method
 * \param[in] error: current error
 */
bool checkConvergence(const NumericType error) {
auto converged = error < this->epsilon;
return converged;
}
/*!
 * \brief update the jacobian matrix if required.
 * \param[in] converged: boolean stating if the method is
 * called after the convergence of the algorithm or before  * the computation of the next correction.
 *
 * This method can be used to compute the jacobian or part  * of the jacobian numerically. If the jacobian was computed
 * in `computeResidual`, this method can be used to compare it  * to a numerical approximation.
 */
void updateOrCheckJacobian(){
};
/*!
 * \brief method meant to set bounds on some components  * of the current Newton correction or to implement a line  * search.
 */
void processNewCorrection()
{
};
/*!
 * \brief method meant to process the new estimate.
 *
 * This method may be called to apply bounds on the  * new estimate.
 */
void processNewEstimate(){
this->updateMaterialPropertiesDependantOnStateVariables();
}
/*!
 * \brief solve linear system
 * \return true on success
 * \param[in] m: matrix
 * \param[in,out] v: right hand side on input, solution on output
 */
bool solveLinearSystem(tfel::math::tmatrix<2 + StensorSize, 2 + StensorSize, NumericType>& mfront_matrix,tfel::math::tvector<2 + StensorSize, NumericType>& mfront_vector)const noexcept{
auto mfront_success = true;
mfront_success = tfel::math::TinyMatrixSolve<2 + StensorSize, NumericType, false>::exe(mfront_matrix, mfront_vector);
return mfront_success;
}
/*!
* \brief compute fzeros and jacobian
*/
bool computeFdF(const bool perturbatedSystemEvaluation){
using namespace std;
using namespace tfel::math;
using std::vector;
// silent compiler warning
static_cast<void>(perturbatedSystemEvaluation); 
constexpr auto eel_offset = 0u;
static_cast<void>(eel_offset);
auto feel = tfel::math::map<StrainStensor, 0u>(this->fzeros);
constexpr auto p_offset = StensorSize;
static_cast<void>(p_offset);
real& fp(this->fzeros(StensorSize));
constexpr auto etozz_offset = 1 + StensorSize;
static_cast<void>(etozz_offset);
real& fetozz(this->fzeros(1 + StensorSize));
// derivative of residual feel with respect to variable eel
auto&& dfeel_ddeel = tfel::math::map_derivative<0u, 0u, StrainStensor, StrainStensor>(this->jacobian);
// derivative of residual feel with respect to variable p
auto&& dfeel_ddp = tfel::math::map_derivative<0u, StensorSize, StrainStensor, strain>(this->jacobian);
// derivative of residual feel with respect to variable etozz
auto&& dfeel_ddetozz = tfel::math::map_derivative<0u, 1 + StensorSize, StrainStensor, strain>(this->jacobian);
// derivative of residual fp with respect to variable eel
auto&& dfp_ddeel = tfel::math::map_derivative<StensorSize, 0u, strain, StrainStensor>(this->jacobian);
// derivative of residual fp with respect to variable p
auto&& dfp_ddp = tfel::math::map_derivative<StensorSize, StensorSize, strain, strain>(this->jacobian);
// derivative of residual fp with respect to variable etozz
auto&& dfp_ddetozz = tfel::math::map_derivative<StensorSize, 1 + StensorSize, strain, strain>(this->jacobian);
// derivative of residual fetozz with respect to variable eel
auto&& dfetozz_ddeel = tfel::math::map_derivative<1 + StensorSize, 0u, strain, StrainStensor>(this->jacobian);
// derivative of residual fetozz with respect to variable p
auto&& dfetozz_ddp = tfel::math::map_derivative<1 + StensorSize, StensorSize, strain, strain>(this->jacobian);
// derivative of residual fetozz with respect to variable etozz
auto&& dfetozz_ddetozz = tfel::math::map_derivative<1 + StensorSize, 1 + StensorSize, strain, strain>(this->jacobian);
// setting jacobian to identity
std::fill(this->jacobian.begin(),this->jacobian.end(), NumericType(0));
for(unsigned short idx = 0; idx != 2 + StensorSize; ++idx){
this->jacobian(idx, idx) = NumericType(1);
}
// setting f values to zeros
this->fzeros = this->zeros;
feel -= this->deto;

// the generalised plane stress equation 
// is satisfied at the end of the time step
this->sebdata.szz = (this->sebdata.lambda+2*(this->sebdata.mu))*(this->eel(1)+this->deel(1)) + (this->sebdata.lambda)*(this->eel(0)+this->deel(0)+this->eel(2)+this->deel(2));
fetozz = (this->sebdata.szz-this->sigzz-this->dsigzz) / this->young;
// modification of the partition of strain
feel(1) -= this->detozz;
// jacobian
dfeel_ddetozz(1) = -1;
dfetozz_ddetozz  = real(0);
dfetozz_ddeel(1) = (this->sebdata.lambda+2*(this->sebdata.mu))/this->young;
dfetozz_ddeel(0) = this->sebdata.lambda/this->young;
dfetozz_ddeel(2) = this->sebdata.lambda/this->young;
#line 42 "ImplicitNorton.mfront"
stress iseq = 0.;
#line 43 "ImplicitNorton.mfront"
Stensor s_dev = deviator((this->sig));
#line 44 "ImplicitNorton.mfront"
const stress seq = sqrt(2 * (s_dev | s_dev) / 3);
#line 45 "ImplicitNorton.mfront"
real aux;
#line 46 "ImplicitNorton.mfront"
if ((this->T)>0){
#line 47 "ImplicitNorton.mfront"
aux = exp(-(this->Qact)/(this->r_const)/(this->T));
#line 48 "ImplicitNorton.mfront"
}else{
#line 49 "ImplicitNorton.mfront"
aux = 1.;
#line 50 "ImplicitNorton.mfront"
}
#line 51 "ImplicitNorton.mfront"
const auto tmp = (this->A_creep)*pow(seq,(this->n_creep)-1.)*aux;
#line 52 "ImplicitNorton.mfront"
const auto df_dseq = (this->n_creep)*tmp;
#line 53 "ImplicitNorton.mfront"
if (seq>1e-15){
#line 54 "ImplicitNorton.mfront"
(this->n) = s_dev/seq;
#line 55 "ImplicitNorton.mfront"
iseq = 1/seq;
#line 56 "ImplicitNorton.mfront"
}
#line 58 "ImplicitNorton.mfront"
feel += (this->dp)*(this->n);
#line 59 "ImplicitNorton.mfront"
fp   -= tmp*seq*(this->dt);
#line 61 "ImplicitNorton.mfront"
dfeel_ddeel += 2.*(this->mu)*theta*(this->dp)*iseq*(Stensor4::M()-((this->n)^(this->n)));
#line 62 "ImplicitNorton.mfront"
dfeel_ddp    = (this->n);
#line 63 "ImplicitNorton.mfront"
dfp_ddeel    = -2*(this->mu)*theta*df_dseq*(this->dt)*(this->n);
static_cast<void>(dfeel_ddeel); /* suppress potential warnings */
static_cast<void>(dfeel_ddp); /* suppress potential warnings */
static_cast<void>(dfeel_ddetozz); /* suppress potential warnings */
static_cast<void>(dfp_ddeel); /* suppress potential warnings */
static_cast<void>(dfp_ddp); /* suppress potential warnings */
static_cast<void>(dfp_ddetozz); /* suppress potential warnings */
static_cast<void>(dfetozz_ddeel); /* suppress potential warnings */
static_cast<void>(dfetozz_ddp); /* suppress potential warnings */
static_cast<void>(dfetozz_ddetozz); /* suppress potential warnings */
return true;
}

std::pair<bool, time>
computeAPosterioriTimeStepScalingFactor(const time current_time_step_scaling_factor) const override{
const auto time_scaling_factor = this->computeAPosterioriTimeStepScalingFactorII();
return {time_scaling_factor.first,
        std::min(std::min(std::max(time_scaling_factor.second,
                                   this->minimal_time_step_scaling_factor),
                          this->maximal_time_step_scaling_factor),
                 current_time_step_scaling_factor)};
}

/*!
* \brief Update the internal energy at end of the time step
* \param[in] Psi_s: internal energy at end of the time step
*/
void computeInternalEnergy(real& Psi_s) const
{
Psi_s=0;
}

/*!
* \brief Update the dissipated energy at end of the time step
* \param[in] Psi_d: dissipated energy at end of the time step
*/
void computeDissipatedEnergy(real& Psi_d) const
{
Psi_d=0;
}

bool computeConsistentTangentOperator(const SMType smt){
using namespace std;
using namespace tfel::math;
using std::vector;
TinyPermutation<2 + StensorSize> jacobian_permutation;
TinyMatrixSolve<2 + StensorSize, NumericType>::decomp(this->jacobian,jacobian_permutation);
struct TFEL_VISIBILITY_LOCAL GetPartialJacobianInvert{
GetPartialJacobianInvert(ImplicitNorton& b,
const tfel::math::TinyPermutation<2 + StensorSize>& p)
: behaviour(b),
permutation(p)
{}
void operator()(tfel::math::derivative_type<StrainStensor, StrainStensor>& partial_jacobian_eel){
this->behaviour.computePartialJacobianInvert(this->permutation, partial_jacobian_eel);
}
void operator()(tfel::math::derivative_type<StrainStensor, StrainStensor>& partial_jacobian_eel,
tfel::math::derivative_type<strain, StrainStensor>& partial_jacobian_p){
this->behaviour.computePartialJacobianInvert(this->permutation, partial_jacobian_eel,
partial_jacobian_p);
}
void operator()(tfel::math::derivative_type<StrainStensor, StrainStensor>& partial_jacobian_eel,
tfel::math::derivative_type<strain, StrainStensor>& partial_jacobian_p,
tfel::math::derivative_type<strain, StrainStensor>& partial_jacobian_etozz){
this->behaviour.computePartialJacobianInvert(this->permutation, partial_jacobian_eel,
partial_jacobian_p,
partial_jacobian_etozz);
}
private:
ImplicitNorton& behaviour;
const tfel::math::TinyPermutation<2 + StensorSize>& permutation;
}; // end of struct GetPartialJacobianInvert
GetPartialJacobianInvert getPartialJacobianInvert(*this, jacobian_permutation);
if((smt==ELASTIC)||(smt==SECANTOPERATOR)){
computeAlteredElasticStiffness<hypothesis, stress>::exe(Dt,this->sebdata.lambda,this->sebdata.mu);
} else if (smt==CONSISTENTTANGENTOPERATOR){
StiffnessTensor Hooke;
Stensor4 Je;
computeElasticStiffness<N, stress>::exe(Hooke,this->sebdata.lambda,this->sebdata.mu);
getPartialJacobianInvert(Je);
Dt = Hooke*Je;
} else {
  return false;
}
return true;
}

/*!
* \brief compute the sound velocity
* \param[in] rho_m0: mass density in the reference configuration
*/
speed computeSpeedOfSound(const massdensity&) const {
return speed(0);

}

const TangentOperator& getTangentOperator() const{
return this->Dt;
}

void updateExternalStateVariables(){
this->eto  += this->deto;
this->T += this->dT;
this->sigzz += this->dsigzz;
}

//!
~ImplicitNorton()
 override = default;

private:

std::pair<bool, time> computeAPrioriTimeStepScalingFactorII() const{
return {true, this->maximal_time_step_scaling_factor};
}

std::pair<bool, time> computeAPosterioriTimeStepScalingFactorII() const{
return {true,this->maximal_time_step_scaling_factor};
}

//! policy for treating out of bounds conditions
OutOfBoundsPolicy policy = None;
}; // end of ImplicitNorton class

template<typename NumericType>
std::ostream&
operator <<(std::ostream& os,const ImplicitNorton<ModellingHypothesis::AXISYMMETRICALGENERALISEDPLANESTRESS, NumericType, false>& b)
{
os << "εᵗᵒ : " << b.eto << '\n';
os << "Δεᵗᵒ : " << b.deto << '\n';
os << "σ : " << b.sig << '\n';
os << "Δt : " << b.dt << '\n';
os << "young : " << b.young << '\n';
os << "nu : " << b.nu << '\n';
os << "Qact : " << b.Qact << '\n';
os << "A_creep : " << b.A_creep << '\n';
os << "n_creep : " << b.n_creep << '\n';
os << "r_const : " << b.r_const << '\n';
os << "εᵉˡ : " << b.eel << '\n';
os << "Δεᵉˡ : " << b.deel << '\n';
os << "p : " << b.p << '\n';
os << "Δp : " << b.dp << '\n';
os << "etozz : " << b.etozz << '\n';
os << "Δetozz : " << b.detozz << '\n';
os << "T : " << b.T << '\n';
os << "ΔT : " << b.dT << '\n';
os << "sigzz : " << b.sigzz << '\n';
os << "Δsigzz : " << b.dsigzz << '\n';
os << "n : " << b.n << '\n';
os << "relative_value_for_the_equivalent_stress_lower_bound : " << b.relative_value_for_the_equivalent_stress_lower_bound << '\n';
os << "ε : " << b.epsilon << '\n';
os << "θ : " << b.theta << '\n';
os << "minimal_time_step_scaling_factor : " << b.minimal_time_step_scaling_factor << '\n';
os << "maximal_time_step_scaling_factor : " << b.maximal_time_step_scaling_factor << '\n';
os << "numerical_jacobian_epsilon : " << b.numerical_jacobian_epsilon << '\n';
os << "iterMax : " << b.iterMax << '\n';
return os;
}

/*!
* \class ImplicitNorton
* \brief This class implements the ImplicitNorton behaviour.
* \tparam hypothesis: modelling hypothesis.
* \tparam NumericType: numerical type.
* \author Thomas Helfer - modified
* \date   24 / 11 / 2016
*/
template<typename NumericType>
struct ImplicitNorton<ModellingHypothesis::PLANESTRESS, NumericType, false> final
: public MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,ModellingHypothesis::PLANESTRESS, NumericType, false>,
public ImplicitNortonBehaviourData<ModellingHypothesis::PLANESTRESS, NumericType, false>,
public ImplicitNortonIntegrationData<ModellingHypothesis::PLANESTRESS, NumericType, false>,
public tfel::math::TinyNewtonRaphsonSolver<2 + ModellingHypothesisToStensorSize<ModellingHypothesis::PLANESTRESS>::value, NumericType, ImplicitNorton<ModellingHypothesis::PLANESTRESS, NumericType, false>>{

static constexpr ModellingHypothesis::Hypothesis hypothesis = ModellingHypothesis::PLANESTRESS;
static constexpr unsigned short N = ModellingHypothesisToSpaceDimension<hypothesis>::value;

static_assert(N==1||N==2||N==3);
static_assert(tfel::typetraits::IsFundamentalNumericType<NumericType>::cond);
static_assert(tfel::typetraits::IsReal<NumericType>::cond);

friend std::ostream& operator<< <>(std::ostream&,const ImplicitNorton&);

friend struct tfel::math::TinyNonLinearSolverBase<2 + ModellingHypothesisToStensorSize<ModellingHypothesis::PLANESTRESS>::value, NumericType, ImplicitNorton>;
static constexpr unsigned short TVectorSize = N;
typedef tfel::math::StensorDimeToSize<N> StensorDimeToSize;
static constexpr unsigned short StensorSize = StensorDimeToSize::value;
typedef tfel::math::TensorDimeToSize<N> TensorDimeToSize;
static constexpr unsigned short TensorSize = TensorDimeToSize::value;

using ushort =  unsigned short;
using Types = tfel::config::Types<N, NumericType, false>;
using Type = NumericType;
using real = typename Types::real;
using time = typename Types::time;
using length = typename Types::length;
using frequency = typename Types::frequency;
using speed = typename Types::speed;
using stress = typename Types::stress;
using strain = typename Types::strain;
using strainrate = typename Types::strainrate;
using stressrate = typename Types::stressrate;
using temperature = typename Types::temperature;
using thermalexpansion = typename Types::thermalexpansion;
using thermalconductivity = typename Types::thermalconductivity;
using massdensity = typename Types::massdensity;
using energydensity = typename Types::energydensity;
using TVector = typename Types::TVector;
using DisplacementTVector = typename Types::DisplacementTVector;
using ForceTVector = typename Types::ForceTVector;
using HeatFlux = typename Types::HeatFlux;
using TemperatureGradient = typename Types::TemperatureGradient;
using Stensor = typename Types::Stensor;
using StressStensor = typename Types::StressStensor;
using StressRateStensor = typename Types::StressRateStensor;
using StrainStensor = typename Types::StrainStensor;
using StrainRateStensor = typename Types::StrainRateStensor;
using FrequencyStensor = typename Types::FrequencyStensor;
using Tensor = typename Types::Tensor;
using DeformationGradientTensor = typename Types::DeformationGradientTensor;
using StressTensor = typename Types::StressTensor;
using StiffnessTensor = typename Types::StiffnessTensor;
using Stensor4 = typename Types::Stensor4;
using TangentOperator = StiffnessTensor;
using PhysicalConstants = tfel::PhysicalConstants<NumericType, false>;

public :

typedef ImplicitNortonBehaviourData<hypothesis, NumericType, false> BehaviourData;
typedef ImplicitNortonIntegrationData<hypothesis, NumericType, false> IntegrationData;
typedef typename MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::SMFlag SMFlag;
typedef typename MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::SMType SMType;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::ELASTIC;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::SECANTOPERATOR;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::TANGENTOPERATOR;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::CONSISTENTTANGENTOPERATOR;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::NOSTIFFNESSREQUESTED;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::STANDARDTANGENTOPERATOR;
using IntegrationResult = typename MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::IntegrationResult;

using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::SUCCESS;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::FAILURE;
using MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::UNRELIABLE_RESULTS;

using StressFreeExpansionType = StrainStensor;

private :



tfel::math::View<StrainStensor> deel;
#line 26 "ImplicitNorton.mfront"
real& dp;
real& detozz;

#line 29 "ImplicitNorton.mfront"
stress lambda;
#line 30 "ImplicitNorton.mfront"
stress mu;
#line 31 "ImplicitNorton.mfront"
Stensor n;
struct{
stress lambda;
stress mu;
stress szz;
} sebdata;

real relative_value_for_the_equivalent_stress_lower_bound;
NumericType epsilon;
NumericType theta;
time minimal_time_step_scaling_factor;
time maximal_time_step_scaling_factor;
NumericType numerical_jacobian_epsilon;
ushort iterMax;

//! Tangent operator;
TangentOperator Dt;
//! alias to the tangent operator;
TangentOperator& dsig_ddeto;
// updating material properties, in mandatory
void updateMaterialPropertiesDependantOnStateVariables(){
using namespace std;
using namespace tfel::math;
using std::vector;
}

SMType stiffness_matrix_type;
void computeNumericalJacobian(tfel::math::tmatrix<2 + StensorSize,2 + StensorSize, NumericType>& njacobian)
{
using namespace std;
using namespace tfel::math;
tvector<2 + StensorSize, NumericType> tzeros(this->zeros);
tvector<2 + StensorSize, NumericType> tfzeros(this->fzeros);
tmatrix<2 + StensorSize,2 + StensorSize, NumericType> tjacobian(this->jacobian);
for(unsigned short idx = 0; idx!= 2 + StensorSize;++idx){
this->zeros(idx) -= this->numerical_jacobian_epsilon;
this->computeThermodynamicForces();
this->computeFdF(true);
this->zeros = tzeros;
tvector<2 + StensorSize, NumericType> tfzeros2(this->fzeros);
this->zeros(idx) += this->numerical_jacobian_epsilon;
this->computeThermodynamicForces();
this->computeFdF(true);
this->fzeros = (this->fzeros-tfzeros2) / (2 * (this->numerical_jacobian_epsilon));
for(unsigned short idx2 = 0; idx2!= 2 + StensorSize;++idx2){
njacobian(idx2,idx) = this->fzeros(idx2);
}
this->zeros    = tzeros;
this->fzeros   = tfzeros;
}
if(&njacobian!=&(this->jacobian)){
this->jacobian = tjacobian;
}
}

void
computePartialJacobianInvert(const tfel::math::TinyPermutation<2 + StensorSize>& jacobian_permutation, tfel::math::derivative_type<StrainStensor, StrainStensor>& partial_jacobian_eel)
{
using namespace tfel::math;
for(unsigned short idx=0;idx!=StensorSize;++idx){
tvector<2 + StensorSize, NumericType> vect_e(NumericType(0));
vect_e(idx) = NumericType(1);
TinyMatrixSolve<2 + StensorSize, NumericType>::back_substitute(this->jacobian,jacobian_permutation,vect_e);
for(unsigned short idx2=0u;idx2!=StensorSize;++idx2){
partial_jacobian_eel(idx2,idx)=vect_e(idx2);
}
}
}

void
computePartialJacobianInvert(const tfel::math::TinyPermutation<2 + StensorSize>& jacobian_permutation, tfel::math::derivative_type<StrainStensor, StrainStensor>& partial_jacobian_eel,
tfel::math::derivative_type<strain, StrainStensor>& partial_jacobian_p)
{
using namespace tfel::math;
for(unsigned short idx=0;idx!=StensorSize;++idx){
tvector<2 + StensorSize, NumericType> vect_e(NumericType(0));
vect_e(idx) = NumericType(1);
TinyMatrixSolve<2 + StensorSize, NumericType>::back_substitute(this->jacobian,jacobian_permutation,vect_e);
for(unsigned short idx2=0u;idx2!=StensorSize;++idx2){
partial_jacobian_eel(idx2,idx)=vect_e(idx2);
}
partial_jacobian_p(idx)=vect_e(StensorSize);
}
}

void
computePartialJacobianInvert(const tfel::math::TinyPermutation<2 + StensorSize>& jacobian_permutation, tfel::math::derivative_type<StrainStensor, StrainStensor>& partial_jacobian_eel,
tfel::math::derivative_type<strain, StrainStensor>& partial_jacobian_p,
tfel::math::derivative_type<strain, StrainStensor>& partial_jacobian_etozz)
{
using namespace tfel::math;
for(unsigned short idx=0;idx!=StensorSize;++idx){
tvector<2 + StensorSize, NumericType> vect_e(NumericType(0));
vect_e(idx) = NumericType(1);
TinyMatrixSolve<2 + StensorSize, NumericType>::back_substitute(this->jacobian,jacobian_permutation,vect_e);
for(unsigned short idx2=0u;idx2!=StensorSize;++idx2){
partial_jacobian_eel(idx2,idx)=vect_e(idx2);
}
partial_jacobian_p(idx)=vect_e(StensorSize);
partial_jacobian_etozz(idx)=vect_e(1 + StensorSize);
}
}

void computeThermodynamicForces(){
using namespace std;
using namespace tfel::math;
using std::vector;
this->sig = (this->sebdata.lambda)*trace(this->eel+(this->theta)*(this->deel))*Stensor::Id()+2*(this->sebdata.mu)*(this->eel+(this->theta)*(this->deel));

} // end of ImplicitNorton::computeThermodynamicForces

void computeFinalThermodynamicForces(){
using namespace std;
using namespace tfel::math;
using std::vector;
this->sig = (this->sebdata.lambda)*trace(this->eel)*Stensor::Id()+2*(this->sebdata.mu)*this->eel;

} // end of ImplicitNorton::computeFinalThermodynamicForces

/*!
* \brief Update internal variables at end of integration
*/
void updateIntegrationVariables(){
}

/*!
* \brief Update internal variables at end of integration
*/
void updateStateVariables(){
this->eel += this->deel;
this->p += this->dp;
this->etozz += this->detozz;
}

/*!
* \brief Update auxiliary state variables at end of integration
*/
void updateAuxiliaryStateVariables()
{}

//! \brief return an elastic prediction of the stresses
StressStensor computeElasticPrediction() const{
StressStensor prediction_stress;
StressStensor prediction_strain = this->eel+(this->theta)*this->deto;
prediction_stress(0) = 2*(this->sebdata.mu)*((this->sebdata.lambda)/(this->sebdata.lambda+2*(this->sebdata.mu))*(prediction_strain(0)+prediction_strain(1))+prediction_strain(0));
prediction_stress(1) = 2*(this->sebdata.mu)*((this->sebdata.lambda)/(this->sebdata.lambda+2*(this->sebdata.mu))*(prediction_strain(0)+prediction_strain(1))+prediction_strain(1));
prediction_stress(3) = 2*(this->sebdata.mu)*prediction_strain(3);
prediction_stress(2) = stress(0);
return prediction_stress;
}


//! \brief Default constructor (disabled)
ImplicitNorton() =delete ;
//! \brief Copy constructor (disabled)
ImplicitNorton(const ImplicitNorton&) = delete;
//! \brief Assignement operator (disabled)
ImplicitNorton& operator = (const ImplicitNorton&) = delete;

public:

/*!
* \brief Constructor
*/
ImplicitNorton(const ImplicitNortonBehaviourData<hypothesis, NumericType, false>& src1,
const ImplicitNortonIntegrationData<hypothesis, NumericType, false>& src2)
: ImplicitNortonBehaviourData<hypothesis, NumericType, false>(src1),
ImplicitNortonIntegrationData<hypothesis, NumericType, false>(src2),
deel(tfel::math::map<StrainStensor, 0u>(this->zeros)),
dp(this->zeros(StensorSize)),
detozz(this->zeros(1 + StensorSize)),
dsig_ddeto(Dt)
{
using namespace std;
using namespace tfel::math;
using std::vector;
this->relative_value_for_the_equivalent_stress_lower_bound = ImplicitNortonParametersInitializer::get().relative_value_for_the_equivalent_stress_lower_bound;
this->epsilon = ImplicitNortonParametersInitializer::get().epsilon;
this->theta = ImplicitNortonParametersInitializer::get().theta;
this->minimal_time_step_scaling_factor = ImplicitNortonParametersInitializer::get().minimal_time_step_scaling_factor;
this->maximal_time_step_scaling_factor = ImplicitNortonParametersInitializer::get().maximal_time_step_scaling_factor;
this->numerical_jacobian_epsilon = ImplicitNortonParametersInitializer::get().numerical_jacobian_epsilon;
this->iterMax = ImplicitNortonParametersInitializer::get().iterMax;
}

/*
 * \brief constructor for the Generic interface
 * \param[in] mgb_d: behaviour data
 */
ImplicitNorton(const mfront::gb::BehaviourData& mgb_d)
: ImplicitNortonBehaviourData<hypothesis, NumericType, false>(mgb_d),
ImplicitNortonIntegrationData<hypothesis, NumericType, false>(mgb_d),
deel(tfel::math::map<StrainStensor, 0u>(this->zeros)),
dp(this->zeros(StensorSize)),
detozz(this->zeros(1 + StensorSize)),
dsig_ddeto(Dt)
{
using namespace std;
using namespace tfel::math;
using std::vector;
this->relative_value_for_the_equivalent_stress_lower_bound = ImplicitNortonParametersInitializer::get().relative_value_for_the_equivalent_stress_lower_bound;
this->epsilon = ImplicitNortonParametersInitializer::get().epsilon;
this->theta = ImplicitNortonParametersInitializer::get().theta;
this->minimal_time_step_scaling_factor = ImplicitNortonParametersInitializer::get().minimal_time_step_scaling_factor;
this->maximal_time_step_scaling_factor = ImplicitNortonParametersInitializer::get().maximal_time_step_scaling_factor;
this->numerical_jacobian_epsilon = ImplicitNortonParametersInitializer::get().numerical_jacobian_epsilon;
this->iterMax = ImplicitNortonParametersInitializer::get().iterMax;
this-> eto = tfel::math::map<StrainStensor>(mgb_d.s0.gradients);
tfel::fsalgo::transform<StensorSize>::exe(mgb_d.s1.gradients,mgb_d.s0.gradients,this->deto.begin(),std::minus<real>());
this-> sig = tfel::math::map<StressStensor>(mgb_d.s0.thermodynamic_forces);
}

/*!
 * \ brief initialize the behaviour with user code
 */
void initialize(){
using namespace std;
using namespace tfel::math;
using std::vector;
// initialisation Lame's coefficients
this->sebdata.lambda = tfel::material::computeLambda(this->young,this->nu);
this->sebdata.mu = tfel::material::computeMu(this->young,this->nu);

#line 35 "ImplicitNorton.mfront"
this->lambda = computeLambda(this->young, this->nu);
#line 36 "ImplicitNorton.mfront"
this->mu = computeMu(this->young, this->nu);
#line 37 "ImplicitNorton.mfront"
const auto sigel = computeElasticPrediction();
#line 38 "ImplicitNorton.mfront"
this->n = Stensor(0.);
}

/*!
* \brief set the policy for "out of bounds" conditions
*/
void
setOutOfBoundsPolicy(const OutOfBoundsPolicy policy_value){
this->policy = policy_value;
} // end of setOutOfBoundsPolicy

/*!
* \return the modelling hypothesis
*/
constexpr ModellingHypothesis::Hypothesis
getModellingHypothesis() const{
return hypothesis;
} // end of getModellingHypothesis

/*!
* \brief check bounds
*/
void checkBounds() const{
} // end of checkBounds

IntegrationResult
computePredictionOperator(const SMFlag smflag,const SMType smt) override{
using namespace std;
using namespace tfel::math;
using std::vector;
tfel::raise_if(smflag!=MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::STANDARDTANGENTOPERATOR,
"invalid prediction operator flag");
if((smt==ELASTIC)||(smt==SECANTOPERATOR)){
  computeAlteredElasticStiffness<hypothesis, stress>::exe(Dt,this->sebdata.lambda,this->sebdata.mu);
} else {
  return FAILURE;
}return SUCCESS;
}

time getMinimalTimeStepScalingFactor() const noexcept override{
  return this->minimal_time_step_scaling_factor;
}

std::pair<bool, time>
computeAPrioriTimeStepScalingFactor(const time current_time_step_scaling_factor) const override{
const auto time_scaling_factor = this->computeAPrioriTimeStepScalingFactorII();
return {time_scaling_factor.first,
        std::min(std::min(std::max(time_scaling_factor.second,
                                   this->minimal_time_step_scaling_factor),
                          this->maximal_time_step_scaling_factor),
                  current_time_step_scaling_factor)};
}

/*!
 * \brief Integrate behaviour law over the time step
 */
IntegrationResult integrate(const SMFlag smflag,const SMType smt) override{
using namespace std;
using namespace tfel::math;
this->stiffness_matrix_type = smt;
tfel::raise_if(smflag!=MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::STANDARDTANGENTOPERATOR,
"invalid tangent operator flag");
tfel::math::TinyNewtonRaphsonSolver<2 + ModellingHypothesisToStensorSize<ModellingHypothesis::PLANESTRESS>::value, NumericType, ImplicitNorton<ModellingHypothesis::PLANESTRESS, NumericType, false>>::epsilon = this->epsilon;
tfel::math::TinyNewtonRaphsonSolver<2 + ModellingHypothesisToStensorSize<ModellingHypothesis::PLANESTRESS>::value, NumericType, ImplicitNorton<ModellingHypothesis::PLANESTRESS, NumericType, false>>::iterMax = this->iterMax;
if(!this->solveNonLinearSystem()){
return MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::FAILURE;
}
if (this->stiffness_matrix_type != NOSTIFFNESSREQUESTED){
this->updateOrCheckJacobian();
}
this->updateIntegrationVariables();
this->updateStateVariables();
this->computeFinalThermodynamicForces();
this->updateAuxiliaryStateVariables();
if(smt!=NOSTIFFNESSREQUESTED){
if(!this->computeConsistentTangentOperator(smt)){
return MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::FAILURE;
}
}
return MechanicalBehaviour<MechanicalBehaviourBase::STANDARDSTRAINBASEDBEHAVIOUR,hypothesis, NumericType, false>::SUCCESS;
} // end of ImplicitNorton::integrate

bool computeResidual(){
this->computeThermodynamicForces();
return this->computeFdF(false);
}
//! \return the norm of the residual
NumericType computeResidualNorm() {
return tfel::math::norm(this->fzeros) / (2 + StensorSize);
}
/*!
 * \brief check the convergence of the method
 * \param[in] error: current error
 */
bool checkConvergence(const NumericType error) {
auto converged = error < this->epsilon;
return converged;
}
/*!
 * \brief update the jacobian matrix if required.
 * \param[in] converged: boolean stating if the method is
 * called after the convergence of the algorithm or before  * the computation of the next correction.
 *
 * This method can be used to compute the jacobian or part  * of the jacobian numerically. If the jacobian was computed
 * in `computeResidual`, this method can be used to compare it  * to a numerical approximation.
 */
void updateOrCheckJacobian(){
};
/*!
 * \brief method meant to set bounds on some components  * of the current Newton correction or to implement a line  * search.
 */
void processNewCorrection()
{
};
/*!
 * \brief method meant to process the new estimate.
 *
 * This method may be called to apply bounds on the  * new estimate.
 */
void processNewEstimate(){
this->updateMaterialPropertiesDependantOnStateVariables();
}
/*!
 * \brief solve linear system
 * \return true on success
 * \param[in] m: matrix
 * \param[in,out] v: right hand side on input, solution on output
 */
bool solveLinearSystem(tfel::math::tmatrix<2 + StensorSize, 2 + StensorSize, NumericType>& mfront_matrix,tfel::math::tvector<2 + StensorSize, NumericType>& mfront_vector)const noexcept{
auto mfront_success = true;
mfront_success = tfel::math::TinyMatrixSolve<2 + StensorSize, NumericType, false>::exe(mfront_matrix, mfront_vector);
return mfront_success;
}
/*!
* \brief compute fzeros and jacobian
*/
bool computeFdF(const bool perturbatedSystemEvaluation){
using namespace std;
using namespace tfel::math;
using std::vector;
// silent compiler warning
static_cast<void>(perturbatedSystemEvaluation); 
constexpr auto eel_offset = 0u;
static_cast<void>(eel_offset);
auto feel = tfel::math::map<StrainStensor, 0u>(this->fzeros);
constexpr auto p_offset = StensorSize;
static_cast<void>(p_offset);
real& fp(this->fzeros(StensorSize));
constexpr auto etozz_offset = 1 + StensorSize;
static_cast<void>(etozz_offset);
real& fetozz(this->fzeros(1 + StensorSize));
// derivative of residual feel with respect to variable eel
auto&& dfeel_ddeel = tfel::math::map_derivative<0u, 0u, StrainStensor, StrainStensor>(this->jacobian);
// derivative of residual feel with respect to variable p
auto&& dfeel_ddp = tfel::math::map_derivative<0u, StensorSize, StrainStensor, strain>(this->jacobian);
// derivative of residual feel with respect to variable etozz
auto&& dfeel_ddetozz = tfel::math::map_derivative<0u, 1 + StensorSize, StrainStensor, strain>(this->jacobian);
// derivative of residual fp with respect to variable eel
auto&& dfp_ddeel = tfel::math::map_derivative<StensorSize, 0u, strain, StrainStensor>(this->jacobian);
// derivative of residual fp with respect to variable p
auto&& dfp_ddp = tfel::math::map_derivative<StensorSize, StensorSize, strain, strain>(this->jacobian);
// derivative of residual fp with respect to variable etozz
auto&& dfp_ddetozz = tfel::math::map_derivative<StensorSize, 1 + StensorSize, strain, strain>(this->jacobian);
// derivative of residual fetozz with respect to variable eel
auto&& dfetozz_ddeel = tfel::math::map_derivative<1 + StensorSize, 0u, strain, StrainStensor>(this->jacobian);
// derivative of residual fetozz with respect to variable p
auto&& dfetozz_ddp = tfel::math::map_derivative<1 + StensorSize, StensorSize, strain, strain>(this->jacobian);
// derivative of residual fetozz with respect to variable etozz
auto&& dfetozz_ddetozz = tfel::math::map_derivative<1 + StensorSize, 1 + StensorSize, strain, strain>(this->jacobian);
// setting jacobian to identity
std::fill(this->jacobian.begin(),this->jacobian.end(), NumericType(0));
for(unsigned short idx = 0; idx != 2 + StensorSize; ++idx){
this->jacobian(idx, idx) = NumericType(1);
}
// setting f values to zeros
this->fzeros = this->zeros;
feel -= this->deto;

// the plane stress equation is satisfied at the end of the time step
this->sebdata.szz = (this->sebdata.lambda+2*(this->sebdata.mu))*(this->eel(2)+this->deel(2))+                   (this->sebdata.lambda)*(this->eel(0)+this->deel(0)+this->eel(1)+this->deel(1));
fetozz   = this->sebdata.szz/(this->young);
// modification of the partition of strain
feel(2) -= detozz;
// jacobian
dfeel_ddetozz(2) = -1;
dfetozz_ddetozz  = real(0);
dfetozz_ddeel(2) = (this->sebdata.lambda+2*(this->sebdata.mu))/this->young;
dfetozz_ddeel(0) = this->sebdata.lambda/this->young;
dfetozz_ddeel(1) = this->sebdata.lambda/this->young;
#line 42 "ImplicitNorton.mfront"
stress iseq = 0.;
#line 43 "ImplicitNorton.mfront"
Stensor s_dev = deviator((this->sig));
#line 44 "ImplicitNorton.mfront"
const stress seq = sqrt(2 * (s_dev | s_dev) / 3);
#line 45 "ImplicitNorton.mfront"
real aux;
#line 46 "ImplicitNorton.mfront"
if ((this->T)>0){
#line 47 "ImplicitNorton.mfront"
aux = exp(-(this->Qact)/(this->r_const)/(this->T));
#line 48 "ImplicitNorton.mfront"
}else{
#line 49 "ImplicitNorton.mfront"
aux = 1.;
#line 50 "ImplicitNorton.mfront"
}
#line 51 "ImplicitNorton.mfront"
const auto tmp = (this->A_creep)*pow(seq,(this->n_creep)-1.)*aux;
#line 52 "ImplicitNorton.mfront"
const auto df_dseq = (this->n_creep)*tmp;
#line 53 "ImplicitNorton.mfront"
if (seq>1e-15){
#line 54 "ImplicitNorton.mfront"
(this->n) = s_dev/seq;
#line 55 "ImplicitNorton.mfront"
iseq = 1/seq;
#line 56 "ImplicitNorton.mfront"
}
#line 58 "ImplicitNorton.mfront"
feel += (this->dp)*(this->n);
#line 59 "ImplicitNorton.mfront"
fp   -= tmp*seq*(this->dt);
#line 61 "ImplicitNorton.mfront"
dfeel_ddeel += 2.*(this->mu)*theta*(this->dp)*iseq*(Stensor4::M()-((this->n)^(this->n)));
#line 62 "ImplicitNorton.mfront"
dfeel_ddp    = (this->n);
#line 63 "ImplicitNorton.mfront"
dfp_ddeel    = -2*(this->mu)*theta*df_dseq*(this->dt)*(this->n);
static_cast<void>(dfeel_ddeel); /* suppress potential warnings */
static_cast<void>(dfeel_ddp); /* suppress potential warnings */
static_cast<void>(dfeel_ddetozz); /* suppress potential warnings */
static_cast<void>(dfp_ddeel); /* suppress potential warnings */
static_cast<void>(dfp_ddp); /* suppress potential warnings */
static_cast<void>(dfp_ddetozz); /* suppress potential warnings */
static_cast<void>(dfetozz_ddeel); /* suppress potential warnings */
static_cast<void>(dfetozz_ddp); /* suppress potential warnings */
static_cast<void>(dfetozz_ddetozz); /* suppress potential warnings */
return true;
}

std::pair<bool, time>
computeAPosterioriTimeStepScalingFactor(const time current_time_step_scaling_factor) const override{
const auto time_scaling_factor = this->computeAPosterioriTimeStepScalingFactorII();
return {time_scaling_factor.first,
        std::min(std::min(std::max(time_scaling_factor.second,
                                   this->minimal_time_step_scaling_factor),
                          this->maximal_time_step_scaling_factor),
                 current_time_step_scaling_factor)};
}

/*!
* \brief Update the internal energy at end of the time step
* \param[in] Psi_s: internal energy at end of the time step
*/
void computeInternalEnergy(real& Psi_s) const
{
Psi_s=0;
}

/*!
* \brief Update the dissipated energy at end of the time step
* \param[in] Psi_d: dissipated energy at end of the time step
*/
void computeDissipatedEnergy(real& Psi_d) const
{
Psi_d=0;
}

bool computeConsistentTangentOperator(const SMType smt){
using namespace std;
using namespace tfel::math;
using std::vector;
TinyPermutation<2 + StensorSize> jacobian_permutation;
TinyMatrixSolve<2 + StensorSize, NumericType>::decomp(this->jacobian,jacobian_permutation);
struct TFEL_VISIBILITY_LOCAL GetPartialJacobianInvert{
GetPartialJacobianInvert(ImplicitNorton& b,
const tfel::math::TinyPermutation<2 + StensorSize>& p)
: behaviour(b),
permutation(p)
{}
void operator()(tfel::math::derivative_type<StrainStensor, StrainStensor>& partial_jacobian_eel){
this->behaviour.computePartialJacobianInvert(this->permutation, partial_jacobian_eel);
}
void operator()(tfel::math::derivative_type<StrainStensor, StrainStensor>& partial_jacobian_eel,
tfel::math::derivative_type<strain, StrainStensor>& partial_jacobian_p){
this->behaviour.computePartialJacobianInvert(this->permutation, partial_jacobian_eel,
partial_jacobian_p);
}
void operator()(tfel::math::derivative_type<StrainStensor, StrainStensor>& partial_jacobian_eel,
tfel::math::derivative_type<strain, StrainStensor>& partial_jacobian_p,
tfel::math::derivative_type<strain, StrainStensor>& partial_jacobian_etozz){
this->behaviour.computePartialJacobianInvert(this->permutation, partial_jacobian_eel,
partial_jacobian_p,
partial_jacobian_etozz);
}
private:
ImplicitNorton& behaviour;
const tfel::math::TinyPermutation<2 + StensorSize>& permutation;
}; // end of struct GetPartialJacobianInvert
GetPartialJacobianInvert getPartialJacobianInvert(*this, jacobian_permutation);
if((smt==ELASTIC)||(smt==SECANTOPERATOR)){
computeAlteredElasticStiffness<hypothesis, stress>::exe(Dt,this->sebdata.lambda,this->sebdata.mu);
} else if (smt==CONSISTENTTANGENTOPERATOR){
StiffnessTensor Hooke;
Stensor4 Je;
computeElasticStiffness<N, stress>::exe(Hooke,this->sebdata.lambda,this->sebdata.mu);
getPartialJacobianInvert(Je);
Dt = Hooke*Je;
} else {
  return false;
}
return true;
}

/*!
* \brief compute the sound velocity
* \param[in] rho_m0: mass density in the reference configuration
*/
speed computeSpeedOfSound(const massdensity&) const {
return speed(0);

}

const TangentOperator& getTangentOperator() const{
return this->Dt;
}

void updateExternalStateVariables(){
this->eto  += this->deto;
this->T += this->dT;
}

//!
~ImplicitNorton()
 override = default;

private:

std::pair<bool, time> computeAPrioriTimeStepScalingFactorII() const{
return {true, this->maximal_time_step_scaling_factor};
}

std::pair<bool, time> computeAPosterioriTimeStepScalingFactorII() const{
return {true,this->maximal_time_step_scaling_factor};
}

//! policy for treating out of bounds conditions
OutOfBoundsPolicy policy = None;
}; // end of ImplicitNorton class

template<typename NumericType>
std::ostream&
operator <<(std::ostream& os,const ImplicitNorton<ModellingHypothesis::PLANESTRESS, NumericType, false>& b)
{
os << "εᵗᵒ : " << b.eto << '\n';
os << "Δεᵗᵒ : " << b.deto << '\n';
os << "σ : " << b.sig << '\n';
os << "Δt : " << b.dt << '\n';
os << "young : " << b.young << '\n';
os << "nu : " << b.nu << '\n';
os << "Qact : " << b.Qact << '\n';
os << "A_creep : " << b.A_creep << '\n';
os << "n_creep : " << b.n_creep << '\n';
os << "r_const : " << b.r_const << '\n';
os << "εᵉˡ : " << b.eel << '\n';
os << "Δεᵉˡ : " << b.deel << '\n';
os << "p : " << b.p << '\n';
os << "Δp : " << b.dp << '\n';
os << "etozz : " << b.etozz << '\n';
os << "Δetozz : " << b.detozz << '\n';
os << "T : " << b.T << '\n';
os << "ΔT : " << b.dT << '\n';
os << "n : " << b.n << '\n';
os << "relative_value_for_the_equivalent_stress_lower_bound : " << b.relative_value_for_the_equivalent_stress_lower_bound << '\n';
os << "ε : " << b.epsilon << '\n';
os << "θ : " << b.theta << '\n';
os << "minimal_time_step_scaling_factor : " << b.minimal_time_step_scaling_factor << '\n';
os << "maximal_time_step_scaling_factor : " << b.maximal_time_step_scaling_factor << '\n';
os << "numerical_jacobian_epsilon : " << b.numerical_jacobian_epsilon << '\n';
os << "iterMax : " << b.iterMax << '\n';
return os;
}

/*!
* Partial specialisation for ImplicitNorton.
*/
template<ModellingHypothesis::Hypothesis hypothesis, typename NumericType>
class MechanicalBehaviourTraits<ImplicitNorton<hypothesis, NumericType, false> >
{
static constexpr unsigned short N = ModellingHypothesisToSpaceDimension<hypothesis>::value;
static constexpr unsigned short TVectorSize = N;
typedef tfel::math::StensorDimeToSize<N> StensorDimeToSize;
static constexpr unsigned short StensorSize = StensorDimeToSize::value;
typedef tfel::math::TensorDimeToSize<N> TensorDimeToSize;
static constexpr unsigned short TensorSize = TensorDimeToSize::value;
public:
static constexpr bool is_defined = true;
static constexpr bool use_quantities = false;
static constexpr bool hasStressFreeExpansion = false;
static constexpr bool handlesThermalExpansion = false;
static constexpr unsigned short dimension = N;
static constexpr unsigned short material_properties_nb = 6;
static constexpr unsigned short internal_variables_nb  = 1 + StensorSize;
static constexpr unsigned short external_variables_nb  = 1;
static constexpr unsigned short external_variables_nb2 = 0u;
static constexpr bool hasConsistentTangentOperator = true;
static constexpr bool isConsistentTangentOperatorSymmetric = false;
static constexpr bool hasPredictionOperator = true;
static constexpr bool hasAPrioriTimeStepScalingFactor = false;
static constexpr bool hasComputeInternalEnergy = false;
static constexpr bool hasComputeDissipatedEnergy = false;
/*!
* \return the name of the class.
*/
static const char* getName(){
return "ImplicitNorton";
}

};

/*!
* Partial specialisation for ImplicitNorton.
*/
template<typename NumericType>
class MechanicalBehaviourTraits<ImplicitNorton<ModellingHypothesis::AXISYMMETRICALGENERALISEDPLANESTRESS, NumericType, false> >
{
static constexpr unsigned short N = ModellingHypothesisToSpaceDimension<ModellingHypothesis::AXISYMMETRICALGENERALISEDPLANESTRESS>::value;
static constexpr unsigned short TVectorSize = N;
typedef tfel::math::StensorDimeToSize<N> StensorDimeToSize;
static constexpr unsigned short StensorSize = StensorDimeToSize::value;
typedef tfel::math::TensorDimeToSize<N> TensorDimeToSize;
static constexpr unsigned short TensorSize = TensorDimeToSize::value;
public:
static constexpr bool is_defined = true;
static constexpr bool use_quantities = false;
static constexpr bool hasStressFreeExpansion = false;
static constexpr bool handlesThermalExpansion = false;
static constexpr unsigned short dimension = N;
static constexpr unsigned short material_properties_nb = 6;
static constexpr unsigned short internal_variables_nb  = 2 + StensorSize;
static constexpr unsigned short external_variables_nb  = 2;
static constexpr unsigned short external_variables_nb2 = 1;
static constexpr bool hasConsistentTangentOperator = true;
static constexpr bool isConsistentTangentOperatorSymmetric = false;
static constexpr bool hasPredictionOperator = true;
static constexpr bool hasAPrioriTimeStepScalingFactor = false;
static constexpr bool hasComputeInternalEnergy = false;
static constexpr bool hasComputeDissipatedEnergy = false;
/*!
* \return the name of the class.
*/
static const char* getName(){
return "ImplicitNorton";
}

};

/*!
* Partial specialisation for ImplicitNorton.
*/
template<typename NumericType>
class MechanicalBehaviourTraits<ImplicitNorton<ModellingHypothesis::PLANESTRESS, NumericType, false> >
{
static constexpr unsigned short N = ModellingHypothesisToSpaceDimension<ModellingHypothesis::PLANESTRESS>::value;
static constexpr unsigned short TVectorSize = N;
typedef tfel::math::StensorDimeToSize<N> StensorDimeToSize;
static constexpr unsigned short StensorSize = StensorDimeToSize::value;
typedef tfel::math::TensorDimeToSize<N> TensorDimeToSize;
static constexpr unsigned short TensorSize = TensorDimeToSize::value;
public:
static constexpr bool is_defined = true;
static constexpr bool use_quantities = false;
static constexpr bool hasStressFreeExpansion = false;
static constexpr bool handlesThermalExpansion = false;
static constexpr unsigned short dimension = N;
static constexpr unsigned short material_properties_nb = 6;
static constexpr unsigned short internal_variables_nb  = 2 + StensorSize;
static constexpr unsigned short external_variables_nb  = 1;
static constexpr unsigned short external_variables_nb2 = 0u;
static constexpr bool hasConsistentTangentOperator = true;
static constexpr bool isConsistentTangentOperatorSymmetric = false;
static constexpr bool hasPredictionOperator = true;
static constexpr bool hasAPrioriTimeStepScalingFactor = false;
static constexpr bool hasComputeInternalEnergy = false;
static constexpr bool hasComputeDissipatedEnergy = false;
/*!
* \return the name of the class.
*/
static const char* getName(){
return "ImplicitNorton";
}

};

} // end of namespace tfel::material

#endif /* LIB_TFELMATERIAL_IMPLICITNORTON_HXX */
